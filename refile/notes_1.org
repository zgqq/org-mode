* Quick notes
** DONE Using [0%] to statistics development                          :NOTE:
CLOSED: [2016-09-29 Thu 07:44]
   CLOCK: [2016-07-01 Fri 23:44]--[2016-07-01 Fri 23:46] =>  0:02
   Locate cursor to [%] ,then press ctrl+c ctrl+c to update progress.
** DONE [#C] Org mode introduction
CLOSED: [2016-09-29 Thu 07:43]
   http://www.cnblogs.com/holbrook/archive/2012/04/12/2444992.html#sec-3-4-1
   [2016-07-02 Sat 01:26]

** DONE Ctrl + s will lock terminal to no response for any operation! :NOTE:
CLOSED: [2016-09-29 Thu 08:26]
   CLOCK: [2016-07-02 Sat 17:05]--[2016-07-02 Sat 17:06] =>  0:01
   Ctrl + q will unlock
** DONE Compared to digit using	-gt -eq in shell                      :NOTE:
CLOSED: [2016-09-29 Thu 08:26]
   CLOCK: [2016-07-02 Sat 17:07]--[2016-07-02 Sat 17:08] =>  0:01
** DONE Input .v.b.l then press tab can match .vimrc.before.local quickly :NOTE:
CLOSED: [2016-09-29 Thu 08:26]
   CLOCK: [2016-07-02 Sat 21:56]--[2016-07-02 Sat 21:57] =>  0:01
** DONE triple 三倍                                                   :NOTE:
CLOSED: [2016-08-11 Thu 10:43]
- State "DONE"       from ""           [2016-08-11 Thu 10:43]
** DONE org-up-heading-safe jump to parent heading                    :NOTE:
CLOSED: [2016-09-29 Thu 08:27]
** DONE pepetuate 报持 长久的                                         :NOTE:
CLOSED: [2016-09-30 Fri 07:52]
   CLOCK: [2016-07-04 Mon 17:19]--[2016-07-04 Mon 17:22] =>  0:03
** DONE gigantic 巨大的                                               :NOTE:
CLOSED: [2016-09-30 Fri 07:52]
   CLOCK: [2016-07-04 Mon 17:23]--[2016-07-04 Mon 17:24] =>  0:01
** DONE Using intern convert string to symbol                         :NOTE:
CLOSED: [2016-09-30 Fri 07:53]
** DONE Alt+9 show tool window for version control 			       :NOTE:								       CLOCK: [2016-07-07 Thu 09:15]--[2016-07-07 Thu 09:17] =>  0:02
CLOSED: [2016-09-30 Fri 07:53]
** DONE Dired mode d mark delete and move to next line u delete the mark :NOTE:
CLOSED: [2016-09-30 Fri 08:01]
   								       CLOCK: [2016-07-07 Thu 13:18]--[2016-07-07 Thu 13:21] =>  0:03
** DONE Ctrl+shift+enter complete brace in idea                       :NOTE:
CLOSED: [2016-09-30 Fri 08:09]
								       CLOCK: [2016-07-07 Thu 13:44]--[2016-07-07 Thu 13:52] =>  0:08

** DONE [#C] https://blog.jetbrains.com/idea/2006/07/surround-with/
CLOSED: [2016-09-30 Fri 08:10]
 [2016-07-08 Fri 12:52]
** DONE When Git clone, network problem is main one of factors occuring error of packet_write_wait broken pipe :NOTE:
CLOSED: [2016-09-30 Fri 08:20]
CLOCK: [2016-07-08 Fri 20:23]--[2016-07-08 Fri 20:27] =>  0:04

** DONE Using wmctrl to active window in linux                        :NOTE:
CLOSED: [2016-10-08 Sat 01:09]
CLOCK: [2016-07-10 Sun 20:16]--[2016-07-10 Sun 20:17] =>  0:01
** DONE C-x c-e trigger vim editor in terminal                        :NOTE:
CLOSED: [2016-10-08 Sat 01:22]
** DONE If editing the previous line, you can use quick substitution: ^--option25^--newoption :NOTE:
CLOSED: [2016-10-08 Sat 01:34]
** DONE Ctrl +s forward search C-r backward search                    :NOTE:
CLOSED: [2016-10-08 Sat 01:35]
CLOCK: [2016-07-11 Mon 09:25]--[2016-07-11 Mon 09:26] =>  0:01
** DONE C-\ switch to input method  in  emacs                         :NOTE:
CLOSED: [2016-10-08 Sat 01:36]
CLOCK: [2016-07-11 Mon 11:54]--[2016-07-11 Mon 11:55] =>  0:01
** DONE Find . -print0 will delete all of \n                          :NOTE:
CLOSED: [2016-10-08 Sat 01:38]
CLOCK: [2016-07-11 Mon 21:34]--[2016-07-11 Mon 21:35] =>  0:01
** DONE -0      Change xargs to expect NUL (``\0'') characters as separators,
CLOSED: [2016-10-08 Sat 01:39]
         instead of spaces and newlines.  This is expected to be used in
         concert with the -print0 function in find(1). 
      (in concert with 结合,相呼应)                                                              :NOTE:
CLOCK: [2016-07-12 Tue 10:39]--[2016-07-12 Tue 10:41] =>  0:02
** DONE Directory must be lowercase (convention)                      :NOTE:
CLOSED: [2016-10-08 Sat 01:39]
CLOCK: [2016-07-12 Tue 11:19]--[2016-07-12 Tue 11:21] =>  0:02
** DONE Jump to definition                                            :NOTE:
CLOSED: [2016-10-08 Sat 01:41]
CLOCK: [2016-07-14 Thu 14:17]--[2016-07-14 Thu 14:18] =>  0:01
** DONE Format code                                                   :NOTE:
CLOSED: [2016-10-08 Sat 01:43]
CLOCK: [2016-07-14 Thu 14:21]--[2016-07-14 Thu 14:22] =>  0:01
** DONE Open a new line up or down                                    :NOTE:
CLOSED: [2016-10-08 Sat 01:44]
** DONE u prior to str is equals to str.decode("unicode-escape")      :NOTE:
CLOSED: [2016-10-08 Sat 01:46]
CLOCK: [2016-07-15 Fri 00:03]--[2016-07-15 Fri 00:04] =>  0:01
** DONE Copy region or line using avy                                 :NOTE:
CLOSED: [2016-10-08 Sat 01:46]
CLOCK: [2016-07-15 Fri 10:53]--[2016-07-15 Fri 10:54] =>  0:01
** DONE Quick fix                                                     :NOTE:
CLOSED: [2016-10-08 Sat 12:56]
- State "DONE"       from ""           [2016-10-08 Sat 12:56]
CLOCK: [2016-07-15 Fri 12:07]--[2016-07-15 Fri 12:08] =>  0:01
** DONE Conditional breakpoint                                        :NOTE:
CLOSED: [2016-10-08 Sat 12:58]
- State "DONE"       from ""           [2016-10-08 Sat 12:58]
CLOCK: [2016-07-15 Fri 21:40]--[2016-07-15 Fri 21:41] =>  0:01
** DONE compare string using = in shell                               :NOTE:
CLOSED: [2016-10-08 Sat 13:00]
- State "DONE"       from ""           [2016-10-08 Sat 13:00]
** DONE ^yes^no^ is equals to !!:s/yes/no                             :NOTE:
CLOSED: [2016-10-08 Sat 13:00]
- State "DONE"       from ""           [2016-10-08 Sat 13:00]
CLOCK: [2016-07-16 Sat 21:58]--[2016-07-16 Sat 22:00] =>  0:02
** DONE [#C] git commit -a -m , -a represent all,will commit all modified files,but not add new file in the current workspace:NOTE:
CLOSED: [2016-10-08 Sat 13:02]
- State "DONE"       from "TODO"       [2016-10-08 Sat 13:02]
CLOCK: [2016-07-17 Sun 15:09]--[2016-07-17 Sun 15:10] =>  0:01
** DONE [#C] truncate 删除,截断,清空                                  :NOTE:
CLOSED: [2016-10-08 Sat 13:04]
- State "DONE"       from "TODO"       [2016-10-08 Sat 13:04]
CLOCK: [2016-07-17 Sun 17:53]--[2016-07-17 Sun 17:54] =>  0:01
** DONE [#C] !^ is first argument of last command !$ is the last argument of last command :NOTE:
CLOSED: [2016-10-08 Sat 13:04]
- State "DONE"       from "TODO"       [2016-10-08 Sat 13:04]
** DONE [#C] Goto line  ace-jump                                      :NOTE:
CLOSED: [2016-10-08 Sat 13:04]
- State "DONE"       from "TODO"       [2016-10-08 Sat 13:04]
** DONE [#C] Ace link (plugin) emacs                                  :NOTE:
CLOSED: [2016-10-08 Sat 13:04]
- State "DONE"       from "TODO"       [2016-10-08 Sat 13:04]
** DONE [#C] tuple is similar to array                                :NOTE:
CLOSED: [2016-10-08 Sat 13:05]
- State "DONE"       from "TODO"       [2016-10-08 Sat 13:05]
CLOCK: [2016-07-17 Sun 22:08]--[2016-07-17 Sun 22:10] =>  0:02
** DONE [#C] using other word to express as one word be used many times,you can google or baidu for new word :NOTE:
CLOSED: [2016-10-08 Sat 13:06]
- State "DONE"       from "TODO"       [2016-10-08 Sat 13:06]
CLOCK: [2016-07-17 Sun 22:11]--[2016-07-17 Sun 22:12] =>  0:01
** DONE [#C]  Using C-m represent RET in multiple cursors mode
CLOSED: [2016-10-08 Sat 13:06]
- State "DONE"       from "TODO"       [2016-10-08 Sat 13:06]
            :NOTE:
CLOCK: [2016-07-17 Sun 22:36]--[2016-07-17 Sun 22:37] =>  0:01
** DONE [#C] ace-jump-buffer emace plugin                             :NOTE:
CLOSED: [2016-10-08 Sat 13:07]
- State "DONE"       from "TODO"       [2016-10-08 Sat 13:07]
CLOCK: [2016-07-17 Sun 22:46]--[2016-07-17 Sun 22:47] =>  0:01
** DONE [#C] o in visual mode,go to other side of selection vim       :NOTE:
CLOSED: [2016-10-08 Sat 13:39]
- State "DONE"       from "TODO"       [2016-10-08 Sat 13:39]
CLOCK: [2016-07-18 Mon 08:58]--[2016-07-18 Mon 08:59] =>  0:01
** DONE [#C] Optimize import                                          :NOTE:
CLOSED: [2016-10-08 Sat 13:39]
- State "DONE"       from "TODO"       [2016-10-08 Sat 13:39]
** DONE [#C] Using ag to search string in files                       :NOTE:
CLOSED: [2016-10-08 Sat 13:40]
- State "DONE"       from "TODO"       [2016-10-08 Sat 13:40]
CLOCK: [2016-07-18 Mon 21:30]--[2016-07-18 Mon 21:31] =>  0:01
** DONE [#C] As 做原因状语,主要用来解释                               :NOTE:
CLOSED: [2016-10-08 Sat 13:40]
- State "DONE"       from "TODO"       [2016-10-08 Sat 13:40]
Note: Hard links are only valid within the same File System. Symbolic links can span file systems as they are simply the name of another file.
CLOCK: [2016-07-18 Mon 22:42]--[2016-07-18 Mon 22:43] =>  0:01
** DONE [#C] cd directory to execute command is unneccessary          :NOTE:
CLOSED: [2016-10-08 Sat 13:41]
- State "DONE"       from "TODO"       [2016-10-08 Sat 13:41]
CLOCK: [2016-07-18 Mon 22:58]--[2016-07-18 Mon 23:01] =>  0:03
** DONE [#C] using /opt instead of cd /opt                            :NOTE:
CLOSED: [2016-10-08 Sat 13:41]
- State "DONE"       from "TODO"       [2016-10-08 Sat 13:41]
** DONE [#C] for作目的状语 后接名词 For more advanced requirements    :NOTE:
CLOSED: [2016-10-08 Sat 13:41]
- State "DONE"       from "TODO"       [2016-10-08 Sat 13:41]
CLOCK: [2016-07-19 Tue 10:40]--[2016-07-19 Tue 10:41] =>  0:01
** DONE [#C] retriveval 检索                                          :NOTE:
CLOSED: [2016-10-08 Sat 13:41]
- State "DONE"       from "TODO"       [2016-10-08 Sat 13:41]
CLOCK: [2016-07-19 Tue 11:34]--[2016-07-19 Tue 11:35] =>  0:01
** DONE [#C]  if any 如果有的话                                       :NOTE:
CLOSED: [2016-10-08 Sat 13:42]
- State "DONE"       from "TODO"       [2016-10-08 Sat 13:42]
CLOCK: [2016-07-19 Tue 13:25]--[2016-07-19 Tue 13:26] =>  0:01
** DONE [#C] 1,20d delete 1 to 20 line in vim                         :NOTE:
CLOSED: [2016-10-08 Sat 13:42]
- State "DONE"       from "TODO"       [2016-10-08 Sat 13:42]
** DONE [#C] transitive 过渡                                          :NOTE:
CLOSED: [2016-10-08 Sat 13:42]
- State "DONE"       from "TODO"       [2016-10-08 Sat 13:42]
** DONE [#C] f forward page b backward page in vim                    :NOTE:
CLOSED: [2016-10-08 Sat 13:42]
- State "DONE"       from "TODO"       [2016-10-08 Sat 13:42]
** DONE [#C] ships with 过渡                                          :NOTE:
CLOSED: [2016-10-08 Sat 13:42]
- State "DONE"       from "TODO"       [2016-10-08 Sat 13:42]
CLOCK: [2016-07-19 Tue 15:22]--[2016-07-19 Tue 15:23] =>  0:01
** DONE [#C] Must check sha1 of the file when have downloaded file. command to check sha is sha1sum filename in linux :NOTE:
CLOSED: [2016-10-08 Sat 13:43]
- State "DONE"       from "TODO"       [2016-10-08 Sat 13:43]
CLOCK: [2016-07-19 Tue 17:24]--[2016-07-19 Tue 17:25] =>  0:01
** DONE [#C] Using search nagivate rather than having page down util you see it. :NOTE:
CLOSED: [2016-10-08 Sat 13:45]
- State "DONE"       from "TODO"       [2016-10-08 Sat 13:45]
CLOCK: [2016-07-20 Wed 20:56]--[2016-07-20 Wed 20:57] =>  0:01
** DONE [#C] To delete several lines,if you are at the middle of snippet,don't go to head of snippet ,directly press v to select and then press o to select opposite part of snippet :NOTE:
CLOSED: [2016-10-08 Sat 13:45]
- State "DONE"       from "TODO"       [2016-10-08 Sat 13:45]
CLOCK: [2016-07-21 Thu 14:17]--[2016-07-21 Thu 14:20] =>  0:03
** DONE [#C] 2gt go to the  second tab                            :VIM:NOTE:
CLOSED: [2016-10-08 Sat 13:45]
- State "DONE"       from "TODO"       [2016-10-08 Sat 13:45]
CLOCK: [2016-07-21 Thu 18:36]--[2016-07-21 Thu 18:38] =>  0:02
** DONE [#C] To adjust indent pressing tab                     :EDITOR:NOTE:
CLOSED: [2016-10-08 Sat 13:45]
- State "DONE"       from "TODO"       [2016-10-08 Sat 13:45]
CLOCK: [2016-07-21 Thu 18:38]--[2016-07-21 Thu 18:41] =>  0:03
** DONE [#C] Jnativehook is awesome library for cross-platform hook. :JAVA:NOTE:
CLOSED: [2016-10-08 Sat 13:56]
CLOCK: [2016-07-21 Thu 18:44]--[2016-07-21 Thu 18:45] =>  0:01
** DONE [#C] csw" add " surround to a word                        :VIM:NOTE:
CLOSED: [2016-10-08 Sat 13:57]
CLOCK: [2016-07-21 Thu 19:24]--[2016-07-21 Thu 19:25] =>  0:01
** DONE [#C] ds" delete " delete surround ""                      :VIM:NOTE:
CLOSED: [2016-10-08 Sat 13:57]
CLOCK: [2016-07-21 Thu 19:33]--[2016-07-21 Thu 19:35] =>  0:02
** DONE [#C] ( go to first line of paragraph                      :VIM:NOTE:
CLOSED: [2016-10-08 Sat 13:58]
** DONE [#C] [( go to unmatched (                                 :VIM:NOTE:
CLOSED: [2016-10-08 Sat 13:58]
CLOCK: [2016-07-21 Thu 21:49]--[2016-07-21 Thu 21:50] =>  0:01
** DONE [#C]  gd go to definition                                 :VIM:NOTE:
CLOSED: [2016-10-08 Sat 13:58]
CLOCK: [2016-07-21 Thu 22:04]--[2016-07-21 Thu 22:06] =>  0:02
** DONE [#C] Using C-o to jump to last position on the jumplist,C-I to jump forward :VIM:NOTE:
CLOSED: [2016-10-08 Sat 13:59]
CLOCK: [2016-07-21 Thu 22:12]--[2016-07-21 Thu 22:13] =>  0:01
** DONE [#C] Jump list                                         :EDITOR:NOTE:
CLOSED: [2016-10-08 Sat 14:13]
CLOCK: [2016-07-21 Thu 22:15]--[2016-07-21 Thu 22:16] =>  0:01
** DONE [#C] paradigm 范例                                 :VOCABULARY:NOTE:
CLOSED: [2016-10-08 Sat 14:14]
CLOCK: [2016-07-22 Fri 10:05]--[2016-07-22 Fri 10:06] =>  0:01
** DONE [#C] adjacent 相邻                                 :VOCABULARY:NOTE:
CLOSED: [2016-10-08 Sat 14:14]
CLOCK: [2016-07-22 Fri 16:27]--[2016-07-22 Fri 16:28] =>  0:01
** DONE [#C] Using C-c when give up command being inputed       :SHELL:NOTE:
CLOSED: [2016-10-08 Sat 14:15]
** DONE [#C] Hide border                               :WINDOW_MANAGER:NOTE:
CLOSED: [2016-10-08 Sat 14:16]
CLOCK: [2016-07-22 Fri 21:39]--[2016-07-22 Fri 21:40] =>  0:01
** DONE [#C] Hide bar then press modifer to show it    :WINDOW_MANAGER:NOTE:
CLOSED: [2016-10-08 Sat 14:16]
** DONE [#C] Status bar shows at the top               :WINDOW_MANAGER:NOTE:
CLOSED: [2016-10-08 Sat 14:16]
CLOCK: [2016-07-22 Fri 21:44]--[2016-07-22 Fri 21:46] =>  0:02
** DONE [#C] Back and forth                            :WINDOW_MANAGER:NOTE:
CLOSED: [2016-10-08 Sat 14:17]
** DONE [#C] incarnation 化身                                         :NOTE:
CLOSED: [2016-10-08 Sat 14:17]
** DONE [#C] superseded 被取代                                        :NOTE:
CLOSED: [2016-10-08 Sat 14:17]
CLOCK: [2016-07-24 Sun 08:49]--[2016-07-24 Sun 08:50] =>  0:01
** DONE [#C] FAT32 shares all of the other limitations of FAT16 plus the additional one that many non-Windows operating systems that are FAT16-compatible will not work with FAT32. This makes FAT32 inappropriate for dual-boot environments :NOTE:
CLOSED: [2016-10-08 Sat 14:18]
** DONE [#C] advent 到来                                              :NOTE:
CLOSED: [2016-10-08 Sat 14:19]
** DONE [#C] resilient 能恢复                                         :NOTE:
CLOSED: [2016-10-08 Sat 14:19]
** DONE [#C] catastrophic 灾难性的                                    :NOTE:
CLOSED: [2016-10-08 Sat 14:19]
** DONE [#C] firmware固件                                             :NOTE:
CLOSED: [2016-10-08 Sat 14:20]
** DONE [#C] geometry 几何图形                                        :NOTE:
CLOSED: [2016-10-08 Sat 14:20]
CLOCK: [2016-07-24 Sun 09:20]--[2016-07-24 Sun 09:21] =>  0:01
** DONE [#C] mess up 搞乱                                             :NOTE:
CLOSED: [2016-10-08 Sat 14:20]
** DONE [#C] intact 完好的                                            :NOTE:
CLOSED: [2016-10-08 Sat 14:20]
** DONE [#C] get around 绕开                                          :NOTE:
CLOSED: [2016-10-08 Sat 14:20]
** DONE [#C] as per 按照                                              :NOTE:
CLOSED: [2016-10-08 Sat 14:20]
** DONE [#C] fcdisk device name,d delete a parition       :SHELL:NOTE:LINUX:
CLOSED: [2016-10-08 Sat 14:21]
CLOCK: [2016-07-24 Sun 19:31]--[2016-07-24 Sun 19:34] =>  0:03
** DONE [#C] #parted /dev/dbc print ;  to print detail of device      :NOTE:
CLOSED: [2016-10-08 Sat 14:22]
CLOCK: [2016-07-24 Sun 19:34]--[2016-07-24 Sun 19:35] =>  0:01
** DONE [#C] # mkfs.ext4 /dev/sdc1 ; to change file system of parition :SHELL:NOTE:LINUX:
CLOSED: [2016-10-08 Sat 14:21]
CLOCK: [2016-07-24 Sun 19:37]--[2016-07-24 Sun 19:38] =>  0:01
** DONE [#C] Shift+Esc to exit Ignore mode in vimfx                   :NOTE:
CLOSED: [2016-10-08 Sat 14:23]
CLOCK: [2016-07-26 Tue 10:42]--[2016-07-26 Tue 10:42] =>  0:00
** DONE [#C] i to enter Ignore Mode in vimfx                          :NOTE:
CLOSED: [2016-10-08 Sat 14:24]
CLOCK: [2016-07-26 Tue 10:42]--[2016-07-26 Tue 10:43] =>  0:01
** DONE [#C] The /etc/fstab file can be used to define how disk partitions, various other block devices, or remote filesystems should be mounted into the filesystem. :NOTE:
CLOSED: [2016-10-08 Sat 14:24]
CLOCK: [2016-07-26 Tue 14:18]--[2016-07-26 Tue 14:19] =>  0:01
** DONE [#C] case by case 具体问题具体分析                            :NOTE:
CLOSED: [2016-10-08 Sat 14:24]
CLOCK: [2016-07-26 Tue 15:29]--[2016-07-26 Tue 15:30] =>  0:01
** DONE [#C] come across 偶然发现                                     :NOTE:
CLOSED: [2016-10-08 Sat 14:24]
CLOCK: [2016-07-27 Wed 21:33]--[2016-07-27 Wed 21:34] =>  0:01
** DONE [#C] though 然而 (可以放在结尾)                               :NOTE:
CLOSED: [2016-10-08 Sat 14:24]
CLOCK: [2016-07-27 Wed 21:34]--[2016-07-27 Wed 21:35] =>  0:01
** DONE [#C] umask  R: (D & (~M))                                     :NOTE:
CLOSED: [2016-10-08 Sat 14:29]
CLOCK: [2016-07-27 Wed 21:39]--[2016-07-27 Wed 21:41] =>  0:02
https://en.wikipedia.org/wiki/Umask
** DONE [#C] iw dev wlp3s0 link to check status of wireless connection :NOTE:
CLOSED: [2016-10-08 Sat 14:25]
CLOCK: [2016-07-31 Sun 16:35]--[2016-07-31 Sun 16:36] =>  0:01
** DONE [#C] nmcli dev wifi connect zgqaaa password 1995826z  to connect wifi :NOTE:
CLOSED: [2016-10-08 Sat 14:31]
CLOCK: [2016-07-31 Sun 11:05]--[2016-07-31 Sun 11:06] =>  0:01
** DONE [#C] grep -C to print  row that is at below matched row       :NOTE:
CLOSED: [2016-10-08 Sat 14:31]
CLOCK: [2016-07-31 Sun 17:38]--[2016-07-31 Sun 17:39] =>  0:01
** DONE [#C] sed -i to modify file                                    :NOTE:
CLOSED: [2016-10-08 Sat 14:33]
CLOCK: [2016-07-31 Sun 18:18]--[2016-07-31 Sun 18:18] =>  0:00
** DONE [#C] D delete to end of line C delete to end of line and enter insert mode :VIM:NOTE:
CLOSED: [2016-10-08 Sat 14:34]
CLOCK: [2016-08-01 Mon 15:35]--[2016-08-01 Mon 15:36] =>  0:01
** DONE [#C] nmcli general status    to show network status           :NOTE:
CLOSED: [2016-10-08 Sat 14:42]
- State "DONE"       from "TODO"       [2016-10-08 Sat 14:42]
CLOCK: [2016-08-01 Mon 21:02]--[2016-08-01 Mon 21:04] =>  0:02
** DONE [#C] fasd (linux productive util)                       :SHELL:NOTE:
CLOSED: [2016-10-08 Sat 14:42]
CLOCK: [2016-08-01 Mon 21:30]--[2016-08-01 Mon 21:31] =>  0:01
** DONE [#C] csw"  add " to a word                                :VIM:NOTE:
CLOSED: [2016-10-08 Sat 15:00]
CLOCK: [2016-08-01 Mon 21:58]--[2016-08-01 Mon 21:58] =>  0:00
** DONE [#C] g;   go to the location of last change               :VIM:NOTE:
CLOSED: [2016-10-08 Sat 15:00]
CLOCK: [2016-08-01 Mon 22:00]--[2016-08-01 Mon 22:00] =>  0:00
** DONE [#C] $*  get content producted by last command          :SHELL:NOTE:
CLOSED: [2016-10-08 Sat 15:00]
CLOCK: [2016-08-02 Tue 15:19]--[2016-08-02 Tue 15:21] =>  0:02
** DONE [#C] Using keysnail                                           :NOTE:
CLOSED: [2016-10-08 Sat 15:00]
CLOCK: [2016-08-02 Tue 15:33]--[2016-08-02 Tue 15:34] =>  0:01
** DONE [#C] Alt+. instead of !$                                :SHELL:NOTE:
CLOSED: [2016-10-08 Sat 15:00]
CLOCK: [2016-08-02 Tue 21:28]--[2016-08-02 Tue 21:29] =>  0:01
** DONE [#C] ctrl+o ctrl+I jump list                              :VIM:NOTE:
CLOSED: [2016-10-08 Sat 15:01]
CLOCK: [2016-08-02 Tue 21:39]--[2016-08-02 Tue 21:39] =>  0:00
** DONE [#C] press / in help page to search shortcut                  :NOTE:
CLOSED: [2016-10-08 Sat 15:01]
CLOCK: [2016-08-03 Wed 09:33]--[2016-08-03 Wed 09:33] =>  0:00
** DONE [#C] F  to open a link new newly created tab                  :NOTE:
CLOSED: [2016-10-08 Sat 15:01]
CLOCK: [2016-08-03 Wed 09:33]--[2016-08-03 Wed 09:34] =>  0:01
** DONE [#C] instead of vipd,using dip to delete a paragraph      :VIM:NOTE:
CLOSED: [2016-10-08 Sat 15:01]
CLOCK: [2016-08-04 Thu 11:01]--[2016-08-04 Thu 11:01] =>  0:00
** DONE [#C] occur 404 ,first execute pacman -Syy to update source    :NOTE:
CLOSED: [2016-10-08 Sat 15:04]
CLOCK: [2016-08-04 Thu 11:27]--[2016-08-04 Thu 11:28] =>  0:01
** DONE [#C] thefuck  modify error command                      :SHELL:NOTE:
CLOSED: [2016-10-08 Sat 15:04]
CLOCK: [2016-08-04 Thu 11:41]--[2016-08-04 Thu 11:41] =>  0:00
** DONE [#C] fk command instead of sudo !!                            :NOTE:
CLOSED: [2016-10-08 Sat 15:04]
CLOCK: [2016-08-04 Thu 11:48]--[2016-08-04 Thu 11:49] =>  0:01
** DONE [#C] ? to show help dialog                                    :NOTE:
CLOSED: [2016-10-08 Sat 15:04]
CLOCK: [2016-08-04 Thu 12:32]--[2016-08-04 Thu 12:33] =>  0:01
** DONE [#C] `. to go the  last modified location                     :NOTE:
CLOSED: [2016-10-08 Sat 15:05]
CLOCK: [2016-08-04 Thu 12:46]--[2016-08-04 Thu 12:46] =>  0:00
** DONE [#C] ... instead of cd ...                              :SHELL:NOTE:
CLOSED: [2016-10-08 Sat 15:05]
CLOCK: [2016-08-04 Thu 12:52]--[2016-08-04 Thu 12:52] =>  0:00
** DONE [#C] -s if file exists and not empty                    :SHELL:NOTE:
CLOSED: [2016-10-08 Sat 15:05]
CLOCK: [2016-08-05 Fri 11:42]--[2016-08-05 Fri 11:43] =>  0:01
** DONE [#C] $# argument number $* all arguments                      :NOTE:
CLOSED: [2016-10-08 Sat 15:06]
CLOCK: [2016-08-05 Fri 12:02]--[2016-08-05 Fri 12:42] =>  0:40
** DONE [#C] ${filename%} % is right to left  # left to right   :SHELL:NOTE:
CLOSED: [2016-10-08 Sat 15:07]
CLOCK: [2016-08-05 Fri 14:29]--[2016-08-05 Fri 14:30] =>  0:01
** DONE [#C] makepkg -sri  download compile install package           :NOTE:
CLOSED: [2016-10-08 Sat 15:07]
CLOCK: [2016-08-05 Fri 16:13]--[2016-08-05 Fri 16:13] =>  0:00
** DONE [#C] xrdb ~/.Xresources fresh urxvt config                    :NOTE:
CLOSED: [2016-10-08 Sat 15:08]
CLOCK: [2016-08-05 Fri 16:32]--[2016-08-05 Fri 16:33] =>  0:01
** DONE [#C] g/^/.m0 is equal to sed '1!G;h;$!d'            :VIM:SHELL:NOTE:
CLOSED: [2016-10-08 Sat 15:08]
CLOCK: [2016-08-05 Fri 21:40]--[2016-08-05 Fri 21:42] =>  0:02
** DONE [#C] % to go () [] {}                                     :VIM:NOTE:
CLOSED: [2016-10-08 Sat 15:08]
CLOCK: [2016-08-05 Fri 22:25]--[2016-08-05 Fri 22:26] =>  0:01
** DONE [#C] s instead of xi                                      :VIM:NOTE:
CLOSED: [2016-10-08 Sat 15:08]
CLOCK: [2016-08-05 Fri 22:44]--[2016-08-05 Fri 22:44] =>  0:00
** DONE [#C] record all things you think                              :NOTE:
CLOSED: [2016-10-08 Sat 15:08]
CLOCK: [2016-08-05 Fri 23:02]--[2016-08-05 Fri 23:04] =>  0:02
** DONE [#C] hub  create github repository using command              :NOTE:
CLOSED: [2016-10-08 Sat 15:08]
CLOCK: [2016-08-05 Fri 23:38]--[2016-08-05 Fri 23:40] =>  0:02
** DONE [#C] sudo fuser -m -k -i /media/zgq/d    find proccess using the directory :SHELL:NOTE:
CLOSED: [2016-10-08 Sat 15:09]
CLOCK: [2016-08-06 Sat 11:05]--[2016-08-06 Sat 11:05] =>  0:00
** DONE [#C] dip,dap instead of vipd,vapd                         :VIM:NOTE:
CLOSED: [2016-10-08 Sat 15:09]
CLOCK: [2016-08-06 Sat 22:32]--[2016-08-06 Sat 22:33] =>  0:01
** DONE [#C] dip dap   dap will include space around paragraph    :VIM:NOTE:
CLOSED: [2016-10-08 Sat 15:09]
CLOCK: [2016-08-06 Sat 22:34]--[2016-08-06 Sat 22:35] =>  0:01
** DONE [#C] opacity-rule = [ "80:class_g = 'URxvt'" ];  transparent compton :NOTE:
CLOSED: [2016-10-08 Sat 15:09]
CLOCK: [2016-08-06 Sat 23:19]--[2016-08-06 Sat 23:20] =>  0:01
** DONE [#C] press gg    go to top  tmux                              :NOTE:
CLOSED: [2016-10-08 Sat 15:10]
CLOCK: [2016-08-06 Sat 23:22]--[2016-08-06 Sat 23:22] =>  0:00
** DONE [#C] df{char} then press . to repeatly operate, quickly delete :VIM:NOTE:
CLOSED: [2016-10-08 Sat 15:10]
CLOCK: [2016-08-07 Sun 00:21]--[2016-08-07 Sun 00:22] =>  0:01
** DONE [#C] d combined with easymotion to more quickly delete    :VIM:NOTE:
CLOSED: [2016-10-08 Sat 15:10]
CLOCK: [2016-08-07 Sun 00:23]--[2016-08-07 Sun 00:23] =>  0:00
** DONE [#C] Y instead of y$                                      :VIM:NOTE:
CLOSED: [2016-10-08 Sat 15:10]
CLOCK: [2016-08-07 Sun 09:41]--[2016-08-07 Sun 09:43] =>  0:02
** DONE [#C] easymotion combined with incremental search          :VIM:NOTE:
CLOSED: [2016-10-08 Sat 15:10]
CLOCK: [2016-08-07 Sun 14:10]--[2016-08-07 Sun 14:11] =>  0:01
** DONE [#C] c-x c-c exit emacs                                :EDITOR:NOTE:
CLOSED: [2016-10-08 Sat 15:11]
CLOCK: [2016-08-07 Sun 15:31]--[2016-08-07 Sun 15:31] =>  0:00
** DONE [#C] ${name:-zgq}       ${var:-default value}           :SHELL:NOTE:
CLOSED: [2016-10-08 Sat 15:11]
CLOCK: [2016-08-07 Sun 21:33]--[2016-08-07 Sun 21:33] =>  0:00
** DONE [#C] prune 删除                                    :VOCABULARY:NOTE:
CLOSED: [2016-10-08 Sat 15:11]
CLOCK: [2016-08-07 Sun 21:35]--[2016-08-07 Sun 21:35] =>  0:00
** DONE [#C] find * '*/\.*' -prune -print   search all no hidden files :SHELL:NOTE:
CLOSED: [2016-10-08 Sat 15:20]
CLOCK: [2016-08-07 Sun 21:38]--[2016-08-07 Sun 21:41] =>  0:03
** DONE [#C] Using tag  to search function definition because directly searching source will result in a number of usage of the function found :NOTE:
CLOSED: [2016-10-08 Sat 15:22]
CLOCK: [2016-08-08 Mon 10:39]--[2016-08-08 Mon 10:40] =>  0:01
** DONE [#C] f, get the latest files d, for directory ,, for all    fasd is a awesome productivity tool :NOTE:
CLOSED: [2016-10-08 Sat 15:22]
CLOCK: [2016-08-08 Mon 14:46]--[2016-08-08 Mon 14:47] =>  0:01
** DONE [#C] !:2 for the second argument of last command        :SHELL:NOTE:
CLOSED: [2016-10-08 Sat 15:22]
CLOCK: [2016-08-08 Mon 15:09]--[2016-08-08 Mon 15:10] =>  0:01
** DONE [#C] http://idea.lanyus.com/ active idea                      :NOTE:
CLOSED: [2016-10-08 Sat 15:22]
CLOCK: [2016-08-08 Mon 16:16]--[2016-08-08 Mon 16:17] =>  0:01
** DONE [#C] alt+1 close project view                    :INTELLIJIDEA:NOTE:
CLOSED: [2016-10-08 Sat 15:23]
CLOCK: [2016-08-08 Mon 16:25]--[2016-08-08 Mon 16:26] =>  0:01
** DONE [#C] g/ok/normal Ono  add no to row before one containg ok :SHELL:NOTE:
CLOSED: [2016-10-08 Sat 15:23]
CLOCK: [2016-08-08 Mon 16:39]--[2016-08-08 Mon 16:40] =>  0:01
** DONE [#C] vnoremap <Space>na :<C-u>action NewClass<CR>  mapping command in visual mode :NOTE:
CLOSED: [2016-10-08 Sat 15:23]
CLOCK: [2016-08-08 Mon 18:11]--[2016-08-08 Mon 18:12] =>  0:01
CLOCK: [2016-08-08 Mon 17:33]--[2016-08-08 Mon 18:07] =>  0:34
CLOCK: [2016-08-08 Mon 17:25]--[2016-08-08 Mon 17:33] =>  0:08
** DONE [#C] updatedb update location for locate command        :SHELL:NOTE:
CLOSED: [2016-10-08 Sat 15:25]
CLOCK: [2016-08-08 Mon 17:33]--[2016-08-08 Mon 17:33] =>  0:00
** DONE [#C]  unzip resources.jar | awk '{ print $2 }' | sed -n '1!p' | cut -d "/" -f1 | awk '!x[$0]++' |xargs -I {} rm -rf "{}"  to remove file that resources.jar contains :SHELL:NOTE:
CLOSED: [2016-10-08 Sat 15:25]
CLOCK: [2016-08-08 Mon 18:07]--[2016-08-08 Mon 18:11] =>  0:04
** DONE [#C] Using tab instead of C-d or C-backspace to align code :INTELLIJIDEA:NOTE:
CLOSED: [2016-10-08 Sat 15:29]
** DONE [#C] :cp previous erro  :cn next error :cc show detail erro :VIM:NOTE:
CLOSED: [2016-10-08 Sat 15:30]
CLOCK: [2016-08-08 Mon 20:40]--[2016-08-08 Mon 20:41] =>  0:01
** DONE [#C] generally speaking enter is for confirm in common program. :NOTE:
CLOSED: [2016-10-08 Sat 15:30]
CLOCK: [2016-08-08 Mon 21:11]--[2016-08-08 Mon 21:11] =>  0:00
** DONE [#C] echo $(grep -c "full system upgrade" /var/log/pacman.log)   the number of system upgrade :SHELL:NOTE:
CLOSED: [2016-10-08 Sat 15:30]
CLOCK: [2016-08-09 Tue 10:29]--[2016-08-09 Tue 10:30] =>  0:01
** DONE [#C] echo  $(head -n1 /var/log/pacman.log | cut -d " " -f 1,2) first install time :SHELL:NOTE:
CLOSED: [2016-10-08 Sat 15:30]
CLOCK: [2016-08-09 Tue 10:32]--[2016-08-09 Tue 10:33] =>  0:01
** DONE [#C] export $EDITOR    for C-x C-e                      :SHELL:NOTE:
CLOSED: [2016-10-08 Sat 15:31]
CLOCK: [2016-08-09 Tue 12:39]--[2016-08-09 Tue 12:40] =>  0:01
** DONE [#C] bd to cd parent directory quickly  bd is a awesome plugin :SHELL:NOTE:
CLOSED: [2016-10-08 Sat 15:31]
CLOCK: [2016-08-09 Tue 17:13]--[2016-08-09 Tue 17:14] =>  0:01
** DONE [#C] fzf Ctrl+t to search file globally                 :SHELL:NOTE:
CLOSED: [2016-10-08 Sat 15:31]
CLOCK: [2016-08-09 Tue 20:28]--[2016-08-09 Tue 20:29] =>  0:01
** DONE [#C] firefox certificate fix try to delete cert8.db   :PROBLEM:NOTE:
CLOSED: [2016-10-08 Sat 15:31]
CLOCK: [2016-08-09 Tue 21:03]--[2016-08-09 Tue 21:04] =>  0:01
** DONE [#C] Instead of inputing full path,using cd /h/z/d/j/p +tab to go to directory /home/zgq/Downloads/java/pkg in zsh :SHELL:NOTE:
CLOSED: [2016-10-08 Sat 15:31]
CLOCK: [2016-08-10 Wed 09:30]--[2016-08-10 Wed 09:33] =>  0:03
** DONE [#C] Ctrl+s is better than pressing alt+b or alt+f many times repeatly :EDITOR:NOTE:
CLOSED: [2016-10-08 Sat 15:32]
CLOCK: [2016-08-10 Wed 09:33]--[2016-08-10 Wed 09:35] =>  0:02

** DONE [#C] using alias for command most frequently used for example alias ll="ls -al" :NOTE:
CLOSED: [2016-10-08 Sat 15:32]
** DONE [#C] Ctrl+t bind to cd directory  fzf-cd-widget         :SHELL:NOTE:
CLOSED: [2016-10-08 Sat 15:32]
CLOCK: [2016-08-10 Wed 09:38]--[2016-08-10 Wed 09:41] =>  0:03
** DONE [#C] Using tab to select multiple target  fzf                 :NOTE:
CLOSED: [2016-10-08 Sat 15:32]
CLOCK: [2016-08-14 Sun 11:03]--[2016-08-14 Sun 11:03] =>  0:00
** DONE [#C] Using alias -s for default editor file opened using      :NOTE:
CLOSED: [2016-10-08 Sat 15:32]
CLOCK: [2016-08-15 Mon 23:18]--[2016-08-15 Mon 23:21] =>  0:03
** DONE [#C] alt+enter  to create new item  of sequence in org-mode   :NOTE:
CLOSED: [2016-10-08 Sat 15:32]
CLOCK: [2016-08-21 Sun 18:39]--[2016-08-21 Sun 18:41] =>  0:02
** DONE [#C] add archlinux plugin to zsh                              :NOTE:
CLOSED: [2016-10-08 Sat 15:33]
CLOCK: [2016-08-22 Mon 18:30]--[2016-08-22 Mon 18:30] =>  0:00
** DONE [#C] replace sudo pacman -S with pacin  to install whatever you want :NOTE:
CLOSED: [2016-10-08 Sat 15:33]
CLOCK: [2016-08-22 Mon 18:33]--[2016-08-22 Mon 18:34] =>  0:01
** DONE [#C] install zsh-syntax-highlighting to check error on the fly :NOTE:
CLOSED: [2016-10-08 Sat 15:33]
CLOCK: [2016-08-22 Mon 18:36]--[2016-08-22 Mon 18:37] =>  0:01
** DONE [#C] alias mkdir = 'mkdir -p' zsh                             :NOTE:
CLOSED: [2016-10-08 Sat 15:33]
CLOCK: [2016-08-22 Mon 18:49]--[2016-08-22 Mon 18:49] =>  0:00
** DONE [#C] install zsh-autosuggestions to prompt automactically according to history. zsh :NOTE:
CLOSED: [2016-10-08 Sat 15:33]
CLOCK: [2016-08-22 Mon 18:59]--[2016-08-22 Mon 19:00] =>  0:01
** DONE [#C] sudo plugin for adding sudo to the front of last command :NOTE:
CLOSED: [2016-10-08 Sat 15:33]
CLOCK: [2016-08-22 Mon 19:14]--[2016-08-22 Mon 19:15] =>  0:01
** DONE [#C] https://github.com/zquestz/s command line tool for searching :NOTE:
CLOSED: [2016-10-08 Sat 15:34]
CLOCK: [2016-08-22 Mon 20:01]--[2016-08-22 Mon 20:02] =>  0:01
** DONE [#C] sg (){
CLOSED: [2016-10-08 Sat 15:34]
    s $*
    i3-msg workspace 2
} for interactiving with i3                                                         :NOTE:
CLOCK: [2016-08-22 Mon 20:02]--[2016-08-22 Mon 20:04] =>  0:02
** DONE [#C] using howdoi to solve simple problem through network     :NOTE:
CLOSED: [2016-10-08 Sat 15:34]
CLOCK: [2016-08-22 Mon 21:19]--[2016-08-22 Mon 21:20] =>  0:01
** DONE [#C] using var = Math.max(var1,var2) instead of if(var1>var2) { var=var1} :NOTE:
CLOSED: [2016-10-08 Sat 15:34]
CLOCK: [2016-08-23 Tue 10:05]--[2016-08-23 Tue 10:14] =>  0:09
** DONE [#C] using yaourt to manage aur package http://www.ostechnix.com/install-yaourt-arch-linux/  archlinux :NOTE:
CLOSED: [2016-10-08 Sat 15:36]
CLOCK: [2016-08-23 Tue 10:14]--[2016-08-23 Tue 10:15] =>  0:01
** DONE [#C] Using ] to go next page vimfx                            :NOTE:
CLOSED: [2016-10-08 Sat 15:36]
CLOCK: [2016-08-23 Tue 14:00]--[2016-08-23 Tue 14:00] =>  0:00
** DONE [#C] Using dW to delete the word that is seperated word_word2 word1-word2 :NOTE:
CLOSED: [2016-10-08 Sat 15:36]
CLOCK: [2016-08-23 Tue 19:32]--[2016-08-23 Tue 19:34] =>  0:02
** DONE [#C] Insert info when new file is created                 :VIM:NOTE:
CLOSED: [2016-10-08 Sat 15:37]
CLOCK: [2016-08-24 Wed 00:40]--[2016-08-24 Wed 00:47] =>  0:07
#+BEGIN_SRC vimL
"新建.c,.h,.sh,.java文件，自动插入文件头 
autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec ":call SetTitle()" 
func SetTitle() 
  "如果文件类型为.sh文件 
  if &filetype == 'sh' 
    call setline(1,"\#########################################################################") 
    call append(line("."), "\# File Name: ".expand("%")) 
    call append(line(".")+1, "\# Author:zgq") 
    call append(line(".")+2, "\# mail: heijiw@163.com") 
    call append(line(".")+3, "\# Created Time: ".strftime("%c")) 
    call append(line(".")+4, "\#########################################################################") 
    call append(line(".")+5, "\#!/bin/bash") 
    call append(line(".")+6, "") 
  else 
    call setline(1, "/*************************************************************************") 
    call append(line("."), "	> File Name: ".expand("%")) 
    call append(line(".")+1, "	> Author: zgq") 
    call append(line(".")+2, "	> Mail: heijiw@163.com") 
    call append(line(".")+3, "	> Created Time: ".strftime("%c")) 
    call append(line(".")+4, " ************************************************************************/") 
    call append(line(".")+5, "")
  endif
  if &filetype == 'cpp'
    call append(line(".")+6, "#include<iostream>")
    call append(line(".")+7, "using namespace std;")
    call append(line(".")+8, "")
  endif
  if &filetype == 'c'
    call append(line(".")+6, "#include<stdio.h>")
    call append(line(".")+7, "")
  endif
  "新建文件后，自动定位到文件末尾
  autocmd BufNewFile * normal G
endfunc 
#+END_SRC
** DONE [#C] insert char after word,ea instead of lllla,insert char before word bi instead of hhhi :NOTE:
CLOSED: [2016-10-08 Sat 19:11]
CLOCK: [2016-08-24 Wed 11:25]--[2016-08-24 Wed 11:28] =>  0:03
** DONE [#C] void* is similar to Object of java                       :NOTE:
CLOSED: [2016-10-08 Sat 19:11]
CLOCK: [2016-08-24 Wed 16:32]--[2016-08-24 Wed 16:32] =>  0:00

** DONE [#C] const char * name="zgq";  error: *name="change" correct:name="dd  char* const name="zgq" error:name="change" :NOTE:
CLOSED: [2016-10-08 Sat 19:13]
CLOCK: [2016-08-24 Wed 17:11]--[2016-08-24 Wed 17:11] =>  0:00
CLOCK: [2016-08-24 Wed 17:08]--[2016-08-24 Wed 17:09] =>  0:01
CLOCK: [2016-08-24 Wed 16:42]--[2016-08-24 Wed 17:08] =>  0:26

** DONE [#C] alias rmrf="rm -rf"                                      :NOTE:
CLOSED: [2016-10-08 Sat 19:13]
CLOCK: [2016-08-24 Wed 17:08]--[2016-08-24 Wed 17:08] =>  0:00
** DONE [#C] Using tldr to view usage of command                      :NOTE:
CLOSED: [2016-10-08 Sat 19:13]
CLOCK: [2016-08-24 Wed 18:47]--[2016-08-24 Wed 18:47] =>  0:00
** DONE [#C] ctrlsf.vim plugin for looking up content in project you want quickly :NOTE:
CLOSED: [2016-10-08 Sat 19:13]
CLOCK: [2016-08-24 Wed 19:35]--[2016-08-24 Wed 19:36] =>  0:01
** DONE [#C] Live template of interllij  sout for System.out.println  :NOTE:
CLOSED: [2016-10-08 Sat 19:13]
CLOCK: [2016-08-24 Wed 20:29]--[2016-08-24 Wed 20:30] =>  0:01
** DONE [#C] Alt+enter to fix bug quickly                :INTELLIJIDEA:NOTE:
CLOSED: [2016-10-08 Sat 19:13]
CLOCK: [2016-08-24 Wed 23:22]--[2016-08-24 Wed 23:22] =>  0:00
** DONE [#C] alt+; to comment line                       :INTELLIJIDEA:NOTE:
CLOSED: [2016-10-08 Sat 19:13]
CLOCK: [2016-08-24 Wed 23:28]--[2016-08-24 Wed 23:29] =>  0:01
** DONE [#C] instead of input of if(isPrefix){ , input isPrefix.if posfix completion :INTELLIJIDEA:NOTE:
CLOSED: [2016-10-08 Sat 19:14]
CLOCK: [2016-08-24 Wed 23:34]--[2016-08-24 Wed 23:35] =>  0:01
** DONE [#C] Extract variable idea will execute refactor action at cusor location :INTELLIJIDEA:NOTE:
CLOSED: [2016-10-08 Sat 19:14]
CLOCK: [2016-08-24 Wed 23:48]--[2016-08-24 Wed 23:52] =>  0:04
** DONE [#C] Go to definition                            :INTELLIJIDEA:NOTE:
CLOSED: [2016-10-08 Sat 19:14]
CLOCK: [2016-08-24 Wed 23:57]--[2016-08-24 Wed 23:57] =>  0:00
** DONE [#C] S-RET  move cursor to next line             :INTELLIJIDEA:NOTE:
CLOSED: [2016-10-08 Sat 19:14]
CLOCK: [2016-08-25 Thu 00:13]--[2016-08-25 Thu 00:14] =>  0:01
** DONE [#C] Why english is so important?                             :NOTE:
CLOSED: [2016-10-08 Sat 19:15]
CLOCK: [2016-08-25 Thu 09:39]--[2016-08-25 Thu 09:45] =>  0:06
As a developer,it is neccessary to have awesome skill of reading and writing english as we need to communicate with foreigner.
** DONE [#C] OptimizeImports                             :INTELLIJIDEA:NOTE:
CLOSED: [2016-10-08 Sat 19:15]
CLOCK: [2016-08-25 Thu 10:04]--[2016-08-25 Thu 10:04] =>  0:00
** DONE [#C] To quickly visit whether there is a file or directory you want in current directory,using a fzf widget binded to C-t :NOTE:
CLOSED: [2016-10-08 Sat 19:15]
CLOCK: [2016-08-25 Thu 10:07]--[2016-08-25 Thu 10:10] =>  0:03
** DONE [#C] as required 按照需要                                     :NOTE:
CLOSED: [2016-10-08 Sat 19:16]
CLOCK: [2016-08-25 Thu 10:24]--[2016-08-25 Thu 10:25] =>  0:01
** DONE [#C] ShowProjectStructureSettings           :INTELLIJIDEA:JAVA:NOTE:
CLOSED: [2016-10-08 Sat 19:16]
CLOCK: [2016-08-25 Thu 10:30]--[2016-08-25 Thu 10:31] =>  0:01
** DONE [#C] Do something and continue in original dir                :NOTE:
CLOSED: [2016-10-08 Sat 19:16]
CLOCK: [2016-08-25 Thu 10:53]--[2016-08-25 Thu 10:53] =>  0:00
      # do something in current dir
      (cd /some/other/dir && other-command)
      # continue in original dir
** DONE [#C] % to matched ( {    g; to older location of change list :VIM:NOTE:
CLOSED: [2016-10-08 Sat 19:17]
CLOCK: [2016-08-25 Thu 11:45]--[2016-08-25 Thu 11:49] =>  0:04
** DONE [#C] instead of esc, press v to concel selected region    :VIM:NOTE:
CLOSED: [2016-10-08 Sat 19:27]
CLOCK: [2016-08-25 Thu 11:53]--[2016-08-25 Thu 11:53] =>  0:00

** DONE [#C] Navigate class                              :INTELLIJIDEA:NOTE:
CLOSED: [2016-10-08 Sat 19:27]
CLOCK: [2016-08-25 Thu 12:45]--[2016-08-25 Thu 12:46] =>  0:01
** DONE [#C] leaps and bounds  跳跃式                      :VOCABULARY:NOTE:
CLOSED: [2016-10-08 Sat 19:28]
CLOCK: [2016-08-25 Thu 12:54]--[2016-08-25 Thu 12:55] =>  0:01
** DONE [#C] It is only a matter of time 只是时间问题                 :NOTE:
CLOSED: [2016-10-08 Sat 19:28]
CLOCK: [2016-08-25 Thu 13:02]--[2016-08-25 Thu 13:06] =>  0:04
** DONE [#C] quest 探索                                               :NOTE:
CLOSED: [2016-10-08 Sat 19:33]
CLOCK: [2016-08-25 Thu 13:06]--[2016-08-25 Thu 13:07] =>  0:01
** DONE [#C] Automatic back-and-forth when switching to the current workspace :WINDOW_MANAGER:NOTE:
CLOSED: [2016-10-08 Sat 19:33]
CLOCK: [2016-08-25 Thu 13:12]--[2016-08-25 Thu 13:12] =>  0:00
For instance: Assume you are on workspace "1: www" and switch to "2: IM" using mod+2 because somebody sent you a message. You don’t need to remember where you came from now, you can just press $mod+2 again to switch back to "1: www".
** DONE [#C] dive into 深入                                           :NOTE:
CLOSED: [2016-10-08 Sat 19:34]
CLOCK: [2016-08-25 Thu 13:25]--[2016-08-25 Thu 13:26] =>  0:01
** DONE [#C] appeal to me 吸引我                                      :NOTE:
CLOSED: [2016-10-08 Sat 19:34]
CLOCK: [2016-08-25 Thu 13:43]--[2016-08-25 Thu 13:43] =>  0:00
** DONE [#C] set -g escape-time 0  to avoid delay tmux                :NOTE:
CLOSED: [2016-10-08 Sat 20:34]
CLOCK: [2016-08-25 Thu 13:56]--[2016-08-25 Thu 13:57] =>  0:01
** DONE [#C] hassle 困难                                   :VOCABULARY:NOTE:
CLOSED: [2016-10-08 Sat 20:34]
CLOCK: [2016-08-25 Thu 14:42]--[2016-08-25 Thu 14:42] =>  0:00
** DONE [#C] robot.return instead of return robot;       :INTELLIJIDEA:NOTE:
CLOSED: [2016-10-08 Sat 20:35]
CLOCK: [2016-08-25 Thu 15:17]--[2016-08-25 Thu 15:17] =>  0:00
** DONE [#C] Extract method                              :INTELLIJIDEA:NOTE:
CLOSED: [2016-10-08 Sat 20:35]
CLOCK: [2016-08-25 Thu 16:29]--[2016-08-25 Thu 16:29] =>  0:00
** DONE [#C] C-S-y  go download page firefox                          :NOTE:
CLOSED: [2016-10-08 Sat 20:35]
CLOCK: [2016-08-25 Thu 16:32]--[2016-08-25 Thu 16:33] =>  0:01
** DONE [#C] tmux-resurrect for saving and restoring all session ,window and pane,program running with pane appeals to me :NOTE:
CLOSED: [2016-10-08 Sat 20:36]
CLOCK: [2016-08-25 Thu 18:34]--[2016-08-25 Thu 18:37] =>  0:03
https://github.com/tmux-plugins/tmux-resurrect
** DONE [#C] yy insteads of C-l C-w  in firefox                       :NOTE:
CLOSED: [2016-10-08 Sat 20:36]
CLOCK: [2016-08-25 Thu 18:38]--[2016-08-25 Thu 18:38] =>  0:00
** DONE [#C] exclusively instead of only                 :INTELLIJIDEA:NOTE:
CLOSED: [2016-10-08 Sat 20:36]
CLOCK: [2016-08-25 Thu 20:21]--[2016-08-25 Thu 20:22] =>  0:01
** DONE [#C] tmux-continuum                                           :NOTE:
CLOSED: [2016-10-08 Sat 20:36]
CLOCK: [2016-08-25 Thu 21:55]--[2016-08-25 Thu 22:03] =>  0:08
CLOCK: [2016-08-25 Thu 21:55]--[2016-08-25 Thu 21:55] =>  0:00
CLOCK: [2016-08-25 Thu 21:53]--[2016-08-25 Thu 21:55] =>  0:02
CLOCK: [2016-08-25 Thu 21:41]--[2016-08-25 Thu 21:53] =>  0:12
CLOCK: [2016-08-25 Thu 21:39]--[2016-08-25 Thu 21:41] =>  0:02
CLOCK: [2016-08-25 Thu 20:24]--[2016-08-25 Thu 21:39] =>  1:15
CLOCK: [2016-08-25 Thu 20:22]--[2016-08-25 Thu 20:23] =>  0:01
https://github.com/tmux-plugins/tmux-continuum
** DONE [#C] psf instead of public static final          :INTELLIJIDEA:NOTE:
CLOSED: [2016-10-08 Sat 20:37]
CLOCK: [2016-08-25 Thu 20:23]--[2016-08-25 Thu 20:24] =>  0:01
** DONE [#C] hub for creating repository of github.com or you want    :NOTE:
CLOSED: [2016-10-08 Sat 20:37]
CLOCK: [2016-08-25 Thu 22:14]--[2016-08-25 Thu 22:15] =>  0:01
https://github.com/github/hub
** DONE [#C] progress for viewing running command https://github.com/Xfennec/progress :NOTE:
CLOSED: [2016-10-08 Sat 20:37]
CLOCK: [2016-08-25 Thu 22:32]--[2016-08-25 Thu 22:33] =>  0:01
** DONE [#C] [ "$*" = "ok" ] shell string judge whether string is equal :NOTE:
CLOSED: [2016-10-08 Sat 20:37]
CLOCK: [2016-08-25 Thu 22:42]--[2016-08-25 Thu 22:44] =>  0:02
** DONE [#C] in place 适当                                            :NOTE:
CLOSED: [2016-10-08 Sat 20:37]
CLOCK: [2016-08-26 Fri 10:05]--[2016-08-26 Fri 10:06] =>  0:01
** DONE [#C] find . -type f -name 'install.sh' -print0 | xargs -0 -I {} sed -i '/shell\/dotfile/s/shell/bin/' {} :NOTE:
CLOSED: [2016-10-08 Sat 20:39]
CLOCK: [2016-08-26 Fri 10:09]--[2016-08-26 Fri 11:46] =>  1:37
find all file named install.sh in current dir and subdir,locate line in file containg string of "shell" and replace shell with bin
** DONE [#C] Find files and replace in shell                          :NOTE:
CLOSED: [2016-10-08 Sat 20:41]
CLOCK: [2016-08-26 Fri 11:47]--[2016-08-26 Fri 11:52] =>  0:05
#+BEGIN_SRC sh
  for file in $(find . -type f -name 'install.sh') 
  do 
      dir=${file%/*} #strip filename 
      dir=${dir#./} #strip first ./
      dir=${dir%/*} #strip last directory
      sed -i "/link_dotfile/s/ \([^ ]\+\)/ ~\/dotfiles\/$dir/" $file #sed don't support not greedy match, using [^] instead.
  done

#+END_SRC
** DONE [#C] Changelist or jumplist is better than search             :NOTE:
CLOSED: [2016-10-08 Sat 20:42]
CLOCK: [2016-08-26 Fri 13:48]--[2016-08-26 Fri 14:03] =>  0:15
Very often i need to modify a bit config then exit vim to execute command for testing whether effective,
frequently,i will go back to continue modify,therefore it is neccessity to find the last modified content,
maybe using search is a awesome idea,however there is yet another better way to do this,you can take full advantage of changelist of vim.
pressing twice ' exclusively will jump to the last modified location.
** DONE [#C] rg instead of 如果 zmb instead of 怎么办                 :NOTE:
CLOSED: [2016-10-08 Sat 20:50]
CLOCK: [2016-08-26 Fri 20:29]--[2016-08-26 Fri 20:29] =>  0:00
** DONE [#C] noremap <Leader>w :w<CR>  to save quickly                :NOTE:
CLOSED: [2016-10-08 Sat 20:51]
CLOCK: [2016-08-26 Fri 20:41]--[2016-08-26 Fri 20:42] =>  0:01
** DONE [#C] g; instead of Fa                                         :NOTE:
CLOSED: [2016-10-08 Sat 20:51]
CLOCK: [2016-08-26 Fri 20:48]--[2016-08-26 Fri 20:54] =>  0:06
Is is extremely useful when you modify a location then using f{x} to jump to char you want in line and
realizing need to modify the location one more time.
** DONE [#C] fx instead of faxian 发现                                :NOTE:
CLOSED: [2016-10-08 Sat 20:51]
CLOCK: [2016-08-26 Fri 20:54]--[2016-08-26 Fri 20:54] =>  0:00
** DONE [#C] $mod+Shift+num move window to workspace                  :NOTE:
CLOSED: [2016-10-08 Sat 20:51]
CLOCK: [2016-08-26 Fri 21:14]--[2016-08-26 Fri 21:14] =>  0:00
** DONE [#C] try out 试验一下                              :VOCABULARY:NOTE:
CLOSED: [2016-10-08 Sat 20:51]
CLOCK: [2016-08-26 Fri 21:27]--[2016-08-26 Fri 21:28] =>  0:01
** DONE [#C] once in a while 偶尔                                     :NOTE:
CLOSED: [2016-10-08 Sat 20:51]
CLOCK: [2016-08-26 Fri 21:31]--[2016-08-26 Fri 21:32] =>  0:01

** DONE [#C] assign [class="idea"] → 4   let window of idea to move to workspace 4 i3 :WINDOW_MANAGER:NOTE:
CLOSED: [2016-10-08 Sat 20:51]
CLOCK: [2016-08-26 Fri 21:35]--[2016-08-26 Fri 21:36] =>  0:01
** DONE [#C] $mod+enter to launch terminal             :WINDOW_MANAGER:NOTE:
CLOSED: [2016-10-08 Sat 20:52]
CLOCK: [2016-08-26 Fri 21:40]--[2016-08-26 Fri 21:41] =>  0:01
** DONE [#C] U Uppercase the visually-selected text.              :VIM:NOTE:
CLOSED: [2016-10-08 Sat 20:52]
CLOCK: [2016-08-27 Sat 17:23]--[2016-08-27 Sat 17:24] =>  0:01
** DONE [#C] = is for format code                                 :VIM:NOTE:
CLOSED: [2016-10-08 Sat 20:52]
CLOCK: [2016-08-27 Sat 17:43]--[2016-08-27 Sat 17:44] =>  0:01
** DONE [#C] To exit the script as soon as one of the commands failed, add this at the beginning: set -e :NOTE:
CLOSED: [2016-10-08 Sat 20:52]
CLOCK: [2016-08-27 Sat 18:23]--[2016-08-27 Sat 18:23] =>  0:00
** DONE [#C] YouCompleteMe for completing                         :VIM:NOTE:
CLOSED: [2016-10-08 Sat 20:52]
CLOCK: [2016-08-27 Sat 18:59]--[2016-08-27 Sat 19:00] =>  0:01
** DONE [#C] Let us improve it a little bit. Vim has a setting called autowrite that writes the content of the file automatically if you call :make. vim-go also makes use of this setting. Open your .vimrc and add the following: set autowrite :NOTE:
CLOSED: [2016-10-08 Sat 20:53]
CLOCK: [2016-08-27 Sat 19:34]--[2016-08-27 Sat 19:34] =>  0:00
** DONE [#C] iterate 重述                                  :VOCABULARY:NOTE:
CLOSED: [2016-10-08 Sat 20:53]
CLOCK: [2016-08-27 Sat 19:37]--[2016-08-27 Sat 19:38] =>  0:01
** DONE [#C] :GoImportAs import :GoDrop delete package  golang        :NOTE:
CLOSED: [2016-10-08 Sat 20:54]
CLOCK: [2016-08-27 Sat 20:28]--[2016-08-27 Sat 20:29] =>  0:01
** DONE [#C] splitjoin for splitting multiple line and joining into a line :NOTE:
CLOSED: [2016-10-08 Sat 20:54]
CLOCK: [2016-08-27 Sat 20:53]--[2016-08-27 Sat 20:53] =>  0:00
https://github.com/AndrewRadev/splitjoin.vim
** DONE [#C] What if 如果是什么 ,该怎么做                             :NOTE:
CLOSED: [2016-10-08 Sat 20:54]
CLOCK: [2016-08-27 Sat 22:11]--[2016-08-27 Sat 22:12] =>  0:01
** DONE [#C] with 随着时间                                            :NOTE:
CLOSED: [2016-10-08 Sat 20:54]
CLOCK: [2016-08-27 Sat 22:12]--[2016-08-27 Sat 22:13] =>  0:01
But what if the project gets larger and larger with time?
** DONE [#C] In our case :GoAlternate is used to switch between a test and non-test file.  golang :NOTE:
CLOSED: [2016-10-08 Sat 20:57]
CLOCK: [2016-08-27 Sat 22:18]--[2016-08-27 Sat 22:19] =>  0:01
** DONE [#C] Go to definition    golang                               :NOTE:
CLOSED: [2016-10-08 Sat 21:01]
CLOCK: [2016-08-27 Sat 22:29]--[2016-08-27 Sat 22:30] =>  0:01
Once we jump to a declaration, we also might want to get back into our previous location. 
By default there is the Vim shortcut ctrl-o that jumps to the previous cursor location. 
It works great when it does, but not good enough if you're navigating between Go declarations. 
If, for example, you jump to a file with :GoDef and then scroll down to the bottom, 
and then maybe to the top, ctrl-o will remember these locations as well. 
So if you want to jump back to the previous location when invoking :GoDef, 
you have to hit ctrl-o multiple times. And this is really annoying.

We don't need to use this shortcut though, as vim-go has a better implementation for you. 
There is a command :GoDefPop which does exactly this. vim-go keeps an internal stack list for all the locations you visit with :GoDef. 
This means you can jump back easily again via :GoDefPop to your older locations, 
and it works even if you scroll down/up in a file. 
And because this is also used so many times we have the shortcut ctrl-t which calls under the hood :GoDefPop. So to recap:

    Use ctrl-] or gd to jump to a definition, locally or globally
    Use ctrl-t to jump back to the previous location
** DONE [#C] xjb  instead of 性价比                                   :NOTE:
CLOSED: [2016-10-08 Sat 21:03]
CLOCK: [2016-08-27 Sat 22:30]--[2016-08-27 Sat 22:31] =>  0:01
** DONE [#C] GoDefStack for showing old location   go.vim             :NOTE:
CLOSED: [2016-10-08 Sat 21:04]
CLOCK: [2016-08-27 Sat 22:37]--[2016-08-27 Sat 22:38] =>  0:01
There is a command that shows all these and it's called :GoDefStack. 
If you call it, you'll see that a custom window with a list of your old locations will be shown.
Just navigate to your desired location and hit enter. And finally to clear the stack list anytime call :GoDefStackClear.
** DONE [#C] vim-go provides(overrides) two motion objects to move between functions. These are: :NOTE:
CLOSED: [2016-10-08 Sat 21:17]
CLOCK: [2016-08-27 Sat 22:51]--[2016-08-27 Sat 22:52] =>  0:01
]] -> jump to next function
[[ -> jump to previous function
** DONE [#C] As usual with other features, we override the default normal shortcut K so that it invokes :GoDoc instead of man (or something else). It's really easy to find the documentation, just hit K in normal mode! golang :NOTE:
CLOSED: [2016-10-08 Sat 21:18]
CLOCK: [2016-08-27 Sat 23:24]--[2016-08-27 Sat 23:24] =>  0:00
** DONE [#C] As 像 ..一样                                  :VOCABULARY:NOTE:
CLOSED: [2016-10-08 Sat 21:20]
CLOCK: [2016-08-27 Sat 23:25]--[2016-08-27 Sat 23:26] =>  0:01
As usual with other features,
** DONE [#C] all but 除了                                  :VOCABULARY:NOTE:
CLOSED: [2016-10-08 Sat 21:20]
CLOCK: [2016-08-28 Sun 13:27]--[2016-08-28 Sun 13:27] =>  0:00
** DONE [#C] up to you 由你决定                            :VOCABULARY:NOTE:
CLOSED: [2016-10-08 Sat 21:21]
CLOCK: [2016-08-28 Sun 15:41]--[2016-08-28 Sun 15:41] =>  0:00
** DONE [#C] Go pointer                                               :NOTE:
CLOSED: [2016-10-08 Sat 21:21]
CLOCK: [2016-08-28 Sun 17:13]--[2016-08-28 Sun 17:16] =>  0:03
var v Vertex
fmt.Println(v.Abs()) // OK
p := &v
fmt.Println(p.Abs()) // OK
In this case, the method call p.Abs() is interpreted as (*p).Abs(). 

** DONE [#C] interface{} is similar to Object in java      golang     :NOTE:
CLOSED: [2016-10-08 Sat 21:21]
CLOCK: [2016-08-28 Sun 17:44]--[2016-08-28 Sun 17:45] =>  0:01
** DONE [#C] switch i.(type) { case string: }  is similar to instanceof in java  golang :NOTE:
CLOSED: [2016-10-08 Sat 21:21]
CLOCK: [2016-08-28 Sun 17:47]--[2016-08-28 Sun 17:48] =>  0:01
** DONE [#C] O instead of kS                                      :VIM:NOTE:
CLOSED: [2016-10-08 Sat 21:22]
CLOCK: [2016-08-28 Sun 17:54]--[2016-08-28 Sun 17:54] =>  0:00
** DONE [#C] no-capturing group' with (?:regex)                       :NOTE:
CLOSED: [2016-10-08 Sat 21:27]
CLOCK: [2016-08-28 Sun 20:29]--[2016-08-28 Sun 20:29] =>  0:00
If a complex regular expressions has several groups you might arrive at a situation 
where we use parentheses for grouping but are not the least interested in the captured string.
To discard the match of a group you can make it a 'non-capturing group' with (?:regex).
The question mark and colon tell the compiler to use the pattern for matching but not to store it.
** DONE [#C] Don't use lib                                            :NOTE:
CLOSED: [2016-10-08 Sat 21:27]
CLOCK: [2016-08-28 Sun 22:17]--[2016-08-28 Sun 22:18] =>  0:01

** DONE [#C] :=  declares variable golang                             :NOTE:
CLOSED: [2016-10-08 Sat 21:27]
CLOCK: [2016-08-29 Mon 11:32]--[2016-08-29 Mon 11:33] =>  0:01

** DONE [#C] defer is similar to finally in java golang               :NOTE:
CLOSED: [2016-10-08 Sat 21:27]
CLOCK: [2016-08-29 Mon 14:30]--[2016-08-29 Mon 14:30] =>  0:00
** DONE [#C] GoRename be mappinged to <Leader>fn                      :NOTE:
CLOSED: [2016-10-08 Sat 21:27]
CLOCK: [2016-08-29 Mon 15:23]--[2016-08-29 Mon 15:23] =>  0:00
** DONE [#C] mucking around 综合                                      :NOTE:
CLOSED: [2016-10-08 Sat 21:28]
CLOCK: [2016-08-30 Tue 20:10]--[2016-08-30 Tue 20:11] =>  0:01
** DONE [#C]  if there is situation of cursor here | (" ,the command of ci" could  directly modify content inside " :VIM:NOTE:
CLOSED: [2016-10-08 Sat 21:28]
CLOCK: [2016-08-30 Tue 22:33]--[2016-08-30 Tue 22:35] =>  0:02
** DONE [#C] Now it is not necessary to input space for seperating most of fuzzy finder :NOTE:
CLOSED: [2016-10-08 Sat 21:29]
CLOCK: [2016-08-30 Tue 22:44]--[2016-08-30 Tue 22:46] =>  0:02
** DONE [#C] C-w v instead of :vs                                 :VIM:NOTE:
CLOSED: [2016-10-08 Sat 21:29]
CLOCK: [2016-08-30 Tue 23:29]--[2016-08-30 Tue 23:29] =>  0:00
** DONE [#C] '. go to last edit location                          :VIM:NOTE:
CLOSED: [2016-10-08 Sat 21:29]
CLOCK: [2016-08-30 Tue 23:38]--[2016-08-30 Tue 23:38] =>  0:00
** DONE [#C] The take command                                         :NOTE:
CLOSED: [2016-10-08 Sat 21:29]
CLOCK: [2016-08-31 Wed 10:55]--[2016-08-31 Wed 10:55] =>  0:00
One of my favourite shortcut command provided by Oh-my-zsh. Basically, 
what the take command does is to create a directory and change
 the path to it. So instead of doing the following:

md someDirectory && cd someDirectory

I could just do:

take someDirectory

That’s really nice !
** DONE [#C] gem command is included in ruby package                  :NOTE:
CLOSED: [2016-10-08 Sat 21:31]
CLOCK: [2016-08-31 Wed 11:00]--[2016-08-31 Wed 11:00] =>  0:00
** DONE [#C] detach 分离                                              :NOTE:
CLOSED: [2016-10-08 Sat 21:31]
CLOCK: [2016-08-31 Wed 17:50]--[2016-08-31 Wed 17:50] =>  0:00
** DONE [#C] B to go start of word which is seperated by space  whatever content bewteen spaces will be as a whole word :VIM:NOTE:
CLOSED: [2016-10-08 Sat 21:32]
CLOCK: [2016-09-01 Thu 20:50]--[2016-09-01 Thu 20:52] =>  0:02
** DONE [#C] Tmuxinator is a awesome plugin of tmux for creating project structure  automactically :NOTE:
CLOSED: [2016-10-08 Sat 21:32]
CLOCK: [2016-09-02 Fri 10:12]--[2016-09-02 Fri 10:13] =>  0:01
** DONE [#C] ]] to go next function                               :VIM:NOTE:
CLOSED: [2016-10-08 Sat 21:32]
CLOCK: [2016-09-02 Fri 23:19]--[2016-09-02 Fri 23:19] =>  0:00
** DONE [#C] linux backup                                             :NOTE:
CLOSED: [2016-10-08 Sat 21:33]
CLOCK: [2016-09-04 Sun 22:15]--[2016-09-04 Sun 22:24] =>  0:09
 sudo rsync -aAX / /mnt/ubuntu --exclude-from $HOME/dotfiles/backup/exclude.txt 2>/home/zgq/tmp/rsync.err
X preserve xattr  
what is Xattr?In other words, they describe some additional properties of the file. Normally this information is limited,
 like ownership and dates

A preserve ACLs 
What is ACLs? 
additional security features such as Access
       Control Lists (ACLs) may be implemented using extended attributes.
exclude.txt
- */.cache/
- */temp/
- */tmp/
- /dev/*
- /proc/*
- /sys/*
- /tmp/*
- /run/*
- /mnt/*
- /media/*
- /lost+found
- *.swp
** DONE [#C] You can execute more than one command by placing a | between two commands. :VIM:NOTE:
CLOSED: [2016-10-08 Sat 21:33]
CLOCK: [2016-09-05 Mon 19:29]--[2016-09-05 Mon 19:29] =>  0:00
** DONE [#C] We use across to emphasise that something is happening at the same time in many places, e.g. within an organisation, a city or a country :NOTE:
CLOSED: [2016-10-08 Sat 21:34]
CLOCK: [2016-09-06 Tue 15:27]--[2016-09-06 Tue 15:28] =>  0:01
    She’s opened coffee shops across the city and they’re very successful.
    Across the country, people are coming out to vote for a new president.                                                       
** DONE [#C] Using / to find method  is faster           :INTELLIJIDEA:NOTE:
CLOSED: [2016-10-08 Sat 21:35]
CLOCK: [2016-09-06 Tue 21:43]--[2016-09-06 Tue 21:43] =>  0:00
** DONE [#C] wakatime record work time                                :NOTE:
CLOSED: [2016-10-08 Sat 21:35]
CLOCK: [2016-09-06 Tue 22:34]--[2016-09-06 Tue 22:35] =>  0:01
https://wakatime.com/help/plugins/vim
** DONE [#C] http://www.lintcode.com/en/problem/                      :NOTE:
CLOSED: [2016-10-08 Sat 21:37]
CLOCK: [2016-09-06 Tue 22:45]--[2016-09-06 Tue 22:45] =>  0:00
maybe lintcode is better than leetcode
** DONE [#C] tmux-open  a amazing plugin for search selected content using default browser :NOTE:
CLOSED: [2016-10-08 Sat 21:39]
CLOCK: [2016-09-07 Wed 22:41]--[2016-09-07 Wed 22:43] =>  0:02

** DONE [#C] let g:multi_cursor_skip_key='<C-x>'                      :NOTE:
CLOSED: [2016-10-08 Sat 21:39]
** DONE [#C] while   have mean of at  the same time                   :NOTE:
CLOSED: [2016-10-08 Sat 21:40]
CLOCK: [2016-09-08 Thu 16:17]--[2016-09-08 Thu 16:18] =>  0:01
** DONE [#C] Don't close door and make own car                        :NOTE:
CLOSED: [2016-10-08 Sat 21:40]
CLOCK: [2016-09-08 Thu 16:22]--[2016-09-08 Thu 16:22] =>  0:00
** DONE [#C] detach                                                   :NOTE:
CLOSED: [2016-10-08 Sat 21:40]
CLOCK: [2016-09-08 Thu 16:29]--[2016-09-08 Thu 16:31] =>  0:02
docker and tmux used this word,consequently,this word should be remembered
** DONE [#C] using thunderbird to send or receive email               :NOTE:
CLOSED: [2016-10-08 Sat 21:40]
CLOCK: [2016-09-08 Thu 20:30]--[2016-09-08 Thu 20:31] =>  0:01
** DONE [#C] those of you who 那些                                    :NOTE:
CLOSED: [2016-10-08 Sat 21:41]
CLOCK: [2016-09-08 Thu 21:46]--[2016-09-08 Thu 21:47] =>  0:01
Those of you who have experience running services in production know that usually apps nowadays are not that simple.
** DONE [#C] tiers 等级                                               :NOTE:
CLOSED: [2016-10-08 Sat 22:46]
CLOCK: [2016-09-08 Thu 22:07]--[2016-09-08 Thu 22:07] =>  0:00
** DONE [#C] get around problem                                       :NOTE:
CLOSED: [2016-10-08 Sat 22:46]
CLOCK: [2016-09-08 Thu 22:26]--[2016-09-08 Thu 22:26] =>  0:00
绕过问题
** DONE [#C] RUN in the build ENTRYPOINT could  not be overrided CMD could be overrided :NOTE:
CLOSED: [2016-10-08 Sat 22:48]
CLOCK: [2016-09-11 Sun 00:17]--[2016-09-11 Sun 00:18] =>  0:01
** DONE [#C] t instead of c-c c-t in org-agenda-mode                  :NOTE:
CLOSED: [2016-10-08 Sat 22:48]
CLOCK: [2016-09-11 Sun 15:20]--[2016-09-11 Sun 15:20] =>  0:00
** DONE [#C] for 目的                                                 :NOTE:
CLOSED: [2016-10-08 Sat 22:49]
CLOCK: [2016-09-11 Sun 20:36]--[2016-09-11 Sun 20:37] =>  0:01
depart for Japan
** DONE [#C] gx$ close right tabs                                     :NOTE:
CLOSED: [2016-10-08 Sat 22:49]
CLOCK: [2016-09-11 Sun 20:57]--[2016-09-11 Sun 20:57] =>  0:00
** DONE [#C] stars:>1000  search repository that are more than 1000 stars in github :NOTE:
CLOSED: [2016-10-08 Sat 22:49]
CLOCK: [2016-09-11 Sun 21:42]--[2016-09-11 Sun 21:43] =>  0:01
** DONE [#C] bash_profile is loaded when logining,while bashrc is load at the time it is switched to :NOTE:
CLOSED: [2016-10-08 Sat 22:50]
CLOCK: [2016-09-12 Mon 11:00]--[2016-09-12 Mon 11:02] =>  0:02
** DONE [#C] Record the regex that i don't how to write.              :NOTE:
CLOSED: [2016-10-08 Sat 22:50]
CLOCK: [2016-09-12 Mon 11:25]--[2016-09-12 Mon 11:25] =>  0:00
** DONE [#C] find . -type f -regex '.*\(swp\|swo\)$' -print0 | xargs -0 -I {} rm -r {} :NOTE:
CLOSED: [2016-10-08 Sat 22:51]
CLOCK: [2016-09-12 Mon 11:28]--[2016-09-12 Mon 11:29] =>  0:01
find filename ending with swp or swo and delete its.
** DONE [#C] Docker run mysql                                         :NOTE:
CLOSED: [2016-10-08 Sat 22:51]
CLOCK: [2016-09-12 Mon 13:23]--[2016-09-12 Mon 13:24] =>  0:01
#+BEGIN_SRC docker
docker run \
--detach \
--name=mysql \
--env="MYSQL_ROOT_PASSWORD=1995826" \
--publish 3306:3306 \
--volume=/root/container/mysql/conf.d:/etc/mysql/conf.d \
--volume=/storage/docker/mysql-datadir:/var/lib/mysql \
mysql
#+END_SRC
** DONE [#C] crontab  key steps                                       :NOTE:
CLOSED: [2016-10-09 Sun 00:36]
CLOCK: [2016-09-12 Mon 21:32]--[2016-09-12 Mon 21:34] =>  0:02
first:the script is executable
second:set crontab to system daemon
** DONE [#C] Random background (archlinux)                            :NOTE:
CLOSED: [2016-10-09 Sun 00:37]
CLOCK: [2016-09-13 Tue 20:44]--[2016-09-13 Tue 20:45] =>  0:01
#+BEGIN_SRC sh
if [ -f "/tmp/bg" ]; then
    value=`cat /tmp/bg`
else
    touch /tmp/bglog
    value=0
    touch /tmp/bg
    echo 0>/tmp/bg
fi
i=0
count=$(ls -1 "/home/zgq/Desktop/images" | wc -l)
_dfiles="/home/zgq/Desktop/images/*"
for file in $_dfiles ; do
    if [ $i -eq $value ]; then
        tmp=$(($i+1))
        if [ $tmp -eq $count ]; then
            echo '0' > /tmp/bg
            DISPLAY=:0 feh --bg-fill "$file" 2> /tmp/bglog
        else
            ((i++))
            echo $i > /tmp/bg
            DISPLAY=:0 feh --bg-fill "$file" 2> /tmp/bglog
            break
        fi
    fi
    ((i++))
done

#+END_SRC
** DONE [#C] Backup system archlinux                                  :NOTE:
CLOSED: [2016-10-09 Sun 00:37]
CLOCK: [2016-09-13 Tue 22:17]--[2016-09-13 Tue 22:18] =>  0:01
10 22 * * 6 sh /home/zgq/bin/weekly.sh 
#+BEGIN_SRC sh
  sudo mount /dev/sda1 /mnt/idle
  sudo rsync -aAX / /mnt/idle/archlinux/backup --exclude-from /home/zgq/dotfiles/backup/exclude.txt 2>/home/zgq/tmp/rsync.err
#+END_SRC
** DONE [#C] L to bottom M to middle H to top                     :VIM:NOTE:
CLOSED: [2016-10-09 Sun 00:37]
CLOCK: [2016-09-13 Tue 22:31]--[2016-09-13 Tue 22:32] =>  0:01
** DONE [#C] diff to compared two file                                :NOTE:
CLOSED: [2016-10-09 Sun 00:37]
CLOCK: [2016-09-14 Wed 18:57]--[2016-09-14 Wed 18:57] =>  0:00
** DONE [#C] prefix +:new to create new session tmux                  :NOTE:
CLOSED: [2016-10-09 Sun 00:37]
CLOCK: [2016-09-14 Wed 19:35]--[2016-09-14 Wed 19:35] =>  0:00
** DONE [#C] Copy post form then generate code of data.Add        :VIM:NOTE:
CLOSED: [2016-10-09 Sun 00:39]
CLOCK: [2016-09-14 Wed 21:36]--[2016-09-14 Wed 21:37] =>  0:01
s/\/\/\(.\{-}\)\:\(.*\)/\0\r\tdata.Add("\1","\2")

** DONE [#C] URxvt antiaslias                                         :NOTE:
CLOSED: [2016-10-09 Sun 00:39]
CLOCK: [2016-09-14 Wed 22:45]--[2016-09-14 Wed 22:46] =>  0:01
URxvt.font:xft:Monaco:pixelsize=16:antialias=true,xft:Microsoft Yahei:pixelsize=14
URxvt.boldFont:xft:Monaco:pixelsize=16:antialias=true:Bold,xft:Microsoft Yahei:pixelsize=16:Bold
** DONE [#C] Transform request header to code                         :NOTE:
CLOSED: [2016-10-09 Sun 00:41]
CLOCK: [2016-09-15 Thu 01:01]--[2016-09-15 Thu 01:03] =>  0:02
s/\(.\{-}\):\(.*\)/req2.Header.Add("\1","\2")/g

Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Origin:https://172.16.0.5:8443

req2.Header.Add("Accept","text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8")
req2.Header.Add("Origin","https://172.16.0.5:8443")

http://stackoverflow.com/questions/1305853/how-can-i-make-my-match-non-greedy-in-vim
Instead of .* use .\{-}.
%s/style=".\{-}"//g
Also, see :help non-greedy
** DONE [#C] So basically only functions / variables starting with a capital letter would be usable outside the package.                                                    go :NOTE:
CLOSED: [2016-10-09 Sun 00:41]
CLOCK: [2016-09-15 Thu 09:14]--[2016-09-15 Thu 09:14] =>  0:00
** DONE [#C] [{ to go { while cursor in the middle of {}          :VIM:NOTE:
CLOSED: [2016-10-09 Sun 00:41]
CLOCK: [2016-09-15 Thu 15:03]--[2016-09-15 Thu 15:04] =>  0:01
** DONE [#C] Go regex example                                         :NOTE:
CLOSED: [2016-10-09 Sun 00:42]
CLOCK: [2016-09-15 Thu 16:00]--[2016-09-15 Thu 16:01] =>  0:01
`(?si)本月使用流量.*?<td.*?colspan=5>.*?(\d+).*?（MB）.*?<`
** DONE [#C] Go time date format                                      :NOTE:
CLOSED: [2016-10-09 Sun 00:42]
CLOCK: [2016-09-15 Thu 16:31]--[2016-09-15 Thu 16:32] =>  0:01
http://stackoverflow.com/questions/33119748/golang-convert-time-time-to-string
#+BEGIN_SRC go
    //Must use 2006 01 02
    fmt.Println("origin : ", current.String())
    // origin :  2016-09-02 15:53:07.159994437 +0800 CST

    fmt.Println("mm-dd-yyyy : ", current.Format("01-02-2006"))
    // mm-dd-yyyy :  09-02-2016

    fmt.Println("yyyy-mm-dd : ", current.Format("2006-01-02"))
    // yyyy-mm-dd :  2016-09-02

    // separated by .
    fmt.Println("yyyy.mm.dd : ", current.Format("2006.01.02"))
    // yyyy.mm.dd :  2016.09.02

    fmt.Println("yyyy-mm-dd HH:mm:ss : ", current.Format("2006-01-02 15:04:05"))
    // yyyy-mm-dd HH:mm:ss :  2016-09-02 15:53:07

    // StampMicro
    fmt.Println("yyyy-mm-dd HH:mm:ss: ", current.Format("2006-01-02 15:04:05.000000"))
    // yyyy-mm-dd HH:mm:ss:  2016-09-02 15:53:07.159994
#+END_SRC
** DONE [#C] Int to string go                                         :NOTE:
CLOSED: [2016-10-09 Sun 00:42]
CLOCK: [2016-09-15 Thu 16:36]--[2016-09-15 Thu 16:36] =>  0:00
strconv.Itoa(123)
** DONE [#C] Using ctrlsp to search whole project                     :NOTE:
CLOSED: [2016-10-09 Sun 00:43]
CLOCK: [2016-09-15 Thu 16:43]--[2016-09-15 Thu 16:43] =>  0:00
#+BEGIN_SRC vimL
nnoremap <leader>ps :CtrlSF<CR>
#+END_SRC
** DONE [#C] org-todo-list to show global todo list  org-mode         :NOTE:
CLOSED: [2016-10-09 Sun 00:43]
CLOCK: [2016-09-16 Fri 14:20]--[2016-09-16 Fri 14:20] =>  0:00
** DONE [#C] C-c a t instead of org-todo-list                         :NOTE:
CLOSED: [2016-10-09 Sun 00:43]
CLOCK: [2016-09-16 Fri 14:39]--[2016-09-16 Fri 14:39] =>  0:00
** DONE [#C] One of the most useful feature is autocomplete zsh :SHELL:NOTE:
CLOSED: [2016-10-09 Sun 00:43]
CLOCK: [2016-09-16 Fri 16:50]--[2016-09-16 Fri 16:51] =>  0:01
#{{{自定义补全 
#补全 ping 
zstyle ':completion:*:ping:*' hosts 192.168.1.{1,50,51,100,101} www.google.com  
** DONE [#C] zsh remain a same history                                :NOTE:
CLOSED: [2016-10-09 Sun 00:43]
CLOCK: [2016-09-16 Fri 20:25]--[2016-09-16 Fri 20:26] =>  0:01
#相同的历史路径只保留一个  
setopt PUSHD_IGNORE_DUPS  
** DONE [#C] What is the difference between utf-8 and unicode         :NOTE:
CLOSED: [2016-10-09 Sun 00:44]
CLOCK: [2016-09-16 Fri 21:43]--[2016-09-16 Fri 21:45] =>  0:02
unicode is map
utf-8 is a transfer implement
Unicode符号范围 | UTF-8编码方式

(十六进制) | （二进制）
—————————————————————–
0000 0000-0000 007F | 0xxxxxxx
0000 0080-0000 07FF | 110xxxxx 10xxxxxx
0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx
0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
https://www.zhihu.com/question/23374078
** DONE [#C] ibus                                                     :NOTE:
CLOSED: [2016-10-09 Sun 00:44]
CLOCK: [2016-09-16 Fri 23:06]--[2016-09-16 Fri 23:07] =>  0:01
XTerm*inputMethod:ibus  
** DONE [#C] Change cursor shape in different modes                   :NOTE:
CLOSED: [2016-10-09 Sun 00:44]
CLOCK: [2016-09-16 Fri 23:12]--[2016-09-16 Fri 23:12] =>  0:00
http://vim.wikia.com/wiki/Change_cursor_shape_in_different_modes
** DONE [#C] pacupg instead of sudo pacman -Syu archlinux       :NOTE:LINUX:
CLOSED: [2016-10-09 Sun 00:44]
CLOCK: [2016-09-17 Sat 00:06]--[2016-09-17 Sat 00:06] =>  0:00
** DONE [#C] Using i3 layout                                          :NOTE:
CLOSED: [2016-10-09 Sun 00:45]
CLOCK: [2016-09-18 Sun 00:12]--[2016-09-18 Sun 00:13] =>  0:01
** DONE [#C] linux wifi                                               :NOTE:
CLOSED: [2016-10-09 Sun 00:45]
CLOCK: [2016-09-18 Sun 13:20]--[2016-09-18 Sun 13:20] =>  0:00
https://github.com/oblique/create_ap
** DONE [#C] LAN local area network                                   :NOTE:
CLOSED: [2016-10-09 Sun 00:45]
CLOCK: [2016-09-19 Mon 12:46]--[2016-09-19 Mon 12:46] =>  0:00
** DONE [#C] :x instead of :wq                                        :NOTE:
CLOSED: [2016-10-09 Sun 00:45]
CLOCK: [2016-09-19 Mon 19:04]--[2016-09-19 Mon 19:04] =>  0:00
** DONE [#C] speed-test test network                                  :NOTE:
CLOSED: [2016-10-09 Sun 00:46]
CLOCK: [2016-09-19 Mon 19:22]--[2016-09-19 Mon 19:23] =>  0:01
https://github.com/sindresorhus/speed-test
** DONE [#C] Learning what is common                                  :NOTE:
CLOSED: [2016-10-09 Sun 00:46]
CLOCK: [2016-09-19 Mon 22:04]--[2016-09-19 Mon 22:10] =>  0:06
What is common?This is a great problem,as you known,there are a sea of knowledage of computer science.
we will face some common problems such as encode when learning lots of program languages,therefore,those problem 
is common,we need to pay more attention to it.
** DONE [#C] npm install                                              :NOTE:
CLOSED: [2016-10-09 Sun 00:47]
CLOCK: [2016-09-20 Tue 09:19]--[2016-09-20 Tue 09:25] =>  0:06
http://www.competa.com/blog/2014/12/how-to-run-npm-without-sudo/
** DONE [#C] K to view document                                   :VIM:NOTE:
CLOSED: [2016-10-09 Sun 00:47]
CLOCK: [2016-09-20 Tue 14:02]--[2016-09-20 Tue 14:02] =>  0:00
** DONE [#C] :GoTestFunc to test single function golang               :NOTE:
CLOSED: [2016-10-09 Sun 00:47]
CLOCK: [2016-09-20 Tue 14:05]--[2016-09-20 Tue 14:05] =>  0:00
** DONE [#C] Using antigen to manage plugins of zsh,  antigen cache-reset to clear cache :NOTE:
CLOSED: [2016-10-09 Sun 00:47]
CLOCK: [2016-09-24 Sat 13:57]--[2016-09-24 Sat 13:58] =>  0:01
** DONE [#C] Quickfix mapping                                     :VIM:NOTE:
CLOSED: [2016-10-09 Sun 00:47]
CLOCK: [2016-09-24 Sat 15:15]--[2016-09-24 Sat 15:16] =>  0:01
" ----------------------------------------------------------------------------
" Quickfix 
" ----------------------------------------------------------------------------
nnoremap ]q :cnext<cr>zz
nnoremap [q :cprev<cr>zz
nnoremap ]l :lnext<cr>zz
nnoremap [l :lprev<cr>zz
** DONE [#C] expand("<cWORD>"  to get word at current cursor          :NOTE:
CLOSED: [2016-10-09 Sun 00:47]
CLOCK: [2016-09-24 Sat 16:37]--[2016-09-24 Sat 16:37] =>  0:00
** DONE [#C] let file = expand("%:p") get full path of current  file :VIM:NOTE:
CLOSED: [2016-10-09 Sun 00:47]
CLOCK: [2016-09-24 Sat 16:55]--[2016-09-24 Sat 16:56] =>  0:01
** DONE [#C] getline to get content of specific line              :VIM:NOTE:
CLOSED: [2016-10-09 Sun 00:48]
CLOCK: [2016-09-24 Sat 17:00]--[2016-09-24 Sat 17:02] =>  0:02
#!/bin/bash
first line

getline(1) is equalent to first line
** DONE [#C] Redraw to clear screen                               :VIM:NOTE:
CLOSED: [2016-10-09 Sun 00:48]
CLOCK: [2016-09-24 Sat 17:06]--[2016-09-24 Sat 17:08] =>  0:02
** DONE [#C] if !a:output | return | endif                        :VIM:NOTE:
CLOSED: [2016-10-09 Sun 00:48]
CLOCK: [2016-09-24 Sat 17:14]--[2016-09-24 Sat 17:15] =>  0:01
if don't output then return
** DONE [#C] exists('s:vim_exec_buf')  whether variable existed   :VIM:NOTE:
CLOSED: [2016-10-09 Sun 00:48]
CLOCK: [2016-09-24 Sat 17:17]--[2016-09-24 Sat 17:18] =>  0:01
** DONE [#C] bufexists(s:vim_exec_buf) whether buf existed        :VIM:NOTE:
CLOSED: [2016-10-09 Sun 00:48]
CLOCK: [2016-09-24 Sat 17:18]--[2016-09-24 Sat 17:19] =>  0:01
** DONE [#C] bash contain element                               :SHELL:NOTE:
CLOSED: [2016-10-09 Sun 00:49]
CLOCK: [2016-09-24 Sat 17:56]--[2016-09-24 Sat 17:59] =>  0:03
#+BEGIN_SRC sh
 if [[$_AWESOME_PLUGINS =~ "fasd"]];then
   echo "contained"
 fi
#+END_SRC
** DONE [#C] Delete buffer named vim-exec-output and new a buffer in vertical window :VIM:NOTE:
CLOSED: [2016-10-09 Sun 00:49]
CLOCK: [2016-09-24 Sat 18:02]--[2016-09-24 Sat 18:04] =>  0:02
#+BEGIN_SRC vimL
    silent!  bdelete [vim-exec-output]
    silent!  vertical botright split new
    silent!  file [vim-exec-output]
 #+END_SRC
** DONE [#C] command mode mapping                                 :VIM:NOTE:
CLOSED: [2016-10-09 Sun 00:49]
CLOCK: [2016-09-24 Sat 19:00]--[2016-09-24 Sat 19:01] =>  0:01
" ----------------------------------------------------------------------------
" Readline-style key bindings in command-line (excerpt from rsi.vim)
" ----------------------------------------------------------------------------
cnoremap        <C-A> <Home>
cnoremap        <C-B> <Left>
cnoremap <expr> <C-D> getcmdpos()>strlen(getcmdline())?"\<Lt>C-D>":"\<Lt>Del>"
cnoremap <expr> <C-F> getcmdpos()>strlen(getcmdline())?&cedit:"\<Lt>Right>"
cnoremap        <M-b> <S-Left>
cnoremap <M-f> <S-Right>
** DONE [#C] v:count receive the times of operating text object   :VIM:NOTE:
CLOSED: [2016-10-09 Sun 00:49]
CLOCK: [2016-09-24 Sat 19:10]--[2016-09-24 Sat 19:11] =>  0:01
** DONE [#C] org mode @ to take a note ! take a time                  :NOTE:
CLOSED: [2016-10-09 Sun 00:50]
CLOCK: [2016-09-24 Sat 19:32]--[2016-09-24 Sat 19:42] =>  0:10
** DONE [#C] xnoremap is only for visual mode,vnoremap is for select mode and visual mode :VIM:NOTE:
CLOSED: [2016-10-09 Sun 00:50]
CLOCK: [2016-09-24 Sat 19:47]--[2016-09-24 Sat 19:48] =>  0:01
http://stackoverflow.com/questions/24782903/vim-mapping-for-visual-line-mode
** DONE [#C] C-] to jump to a tag  is useful when reading help    :VIM:NOTE:
CLOSED: [2016-10-09 Sun 00:50]
CLOCK: [2016-09-24 Sat 21:57]--[2016-09-24 Sat 21:57] =>  0:00
** DONE [#C] :h split() to view document of split funciton        :VIM:NOTE:
CLOSED: [2016-10-09 Sun 00:50]
CLOCK: [2016-09-24 Sat 23:43]--[2016-09-24 Sat 23:43] =>  0:00
** DONE [#C] To split a string in individual characters           :VIM:NOTE:
CLOSED: [2016-10-09 Sun 00:50]
CLOCK: [2016-09-24 Sat 23:45]--[2016-09-24 Sat 23:46] =>  0:01
	To split a string in individual characters:
			:for c in split(mystring, '\zs')
** DONE [#C] Add indent object, is very useful in python,shell and so on :VIM:NOTE:
CLOSED: [2016-10-09 Sun 00:51]
CLOCK: [2016-09-24 Sat 23:46]--[2016-09-24 Sat 23:49] =>  0:03

#+BEGIN_SRC vimL
" ----------------------------------------------------------------------------
" ?ii / ?ai | indent-object
" ?io       | strictly-indent-object
" ----------------------------------------------------------------------------
function! s:indent_len(str)
    return type(a:str) == 1 ? len(matchstr(a:str, '^\s*')) : 0
endfunction

function! s:indent_object(op, skip_blank, b, e, bd, ed)
    let i = min([s:indent_len(getline(a:b)), s:indent_len(getline(a:e))])
    let x = line('$')
    let d = [a:b, a:e]
    if i == 0 && empty(getline(a:b)) && empty(getline(a:e))
        let [b, e] = [a:b, a:e]
        while b > 0 && e <= line('$')
            let b -= 1
            let e += 1
            let i = min(filter(map([b, e], 's:indent_len(getline(v:val))'), 'v:val != 0'))
            if i > 0
                break
            endif
        endwhile
    endif

    for triple in [[0, 'd[o] > 1', -1], [1, 'd[o] < x', +1]]
        let [o, ev, df] = triple
        while eval(ev)
            let line = getline(d[o] + df)
            let idt = s:indent_len(line)
            if eval('idt '.a:op.' i') && (a:skip_blank || !empty(line)) || (a:skip_blank && empty(line))
                let d[o] += df
            else | break | end
        endwhile
    endfor

    execute printf('normal! %dGV%dG', max([1, d[0] + a:bd]), min([x, d[1] + a:ed]))
endfunction

xnoremap <silent> ii :<c-u>call <SID>indent_object('>=', 1, line("'<"), line("'>"), 0, 0)<cr>
onoremap <silent> ii :<c-u>call <SID>indent_object('>=', 1, line('.'), line('.'), 0, 0)<cr>
xnoremap <silent> ai :<c-u>call <SID>indent_object('>=', 1, line("'<"), line("'>"), -1, 1)<cr>
onoremap <silent> ai :<c-u>call <SID>indent_object('>=', 1, line('.'), line('.'), -1, 1)<cr>
xnoremap <silent> io :<c-u>call <SID>indent_object('==', 0, line("'<"), line("'>"), 0, 0)<cr>
onoremap <silent> io :<c-u>call <SID>indent_object('==', 0, line('.'), line('.'), 0, 0)<cr>


#+END_SRC
** DONE [#C] Add several useful text object                       :VIM:NOTE:
CLOSED: [2016-10-09 Sun 00:51]
CLOCK: [2016-09-25 Sun 00:11]--[2016-09-25 Sun 00:15] =>  0:04
#+BEGIN_SRC vimL
" ----------------------------------------------------------------------------
" ?i_ ?a_ ?i. ?a. ?i, ?a, ?i/
" ----------------------------------------------------------------------------
function! s:between_the_chars(incll, inclr, char, vis)
  let cursor = col('.')
  let line   = getline('.')
  let before = line[0 : cursor - 1]
  let after  = line[cursor : -1]
  let [b, e] = [cursor, cursor]

  try
    let i = stridx(join(reverse(split(before, '\zs')), ''), a:char)
    if i < 0 | throw 'exit' | end
    let b = len(before) - i + (a:incll ? 0 : 1)

    let i = stridx(after, a:char)
    if i < 0 | throw 'exit' | end
    let e = cursor + i + 1 - (a:inclr ? 0 : 1)

    execute printf("normal! 0%dlhv0%dlh", b, e)
catch 'exit'
    call s:textobj_cancel()
    if a:vis
      normal! gv
    endif
  finally
    " cleanup command history
    if histget(':', -1) =~ '<snr>[0-9_]*between_the_chars('
      call histdel(':', -1)
    endif
    echo
  endtry
endfunction

for [s:c, s:l] in items({'_': 0, '.': 0, ',': 0, '/': 1, '-': 0})
  execute printf("xmap <silent> i%s :<c-u>call <sid>between_the_chars(0,  0, '%s', 1)<cr><plug>(toc)", s:c, s:c)
  execute printf("omap <silent> i%s :<c-u>call <sid>between_the_chars(0,  0, '%s', 0)<cr><plug>(toc)", s:c, s:c)
  execute printf("xmap <silent> a%s :<c-u>call <sid>between_the_chars(%s, 1, '%s', 1)<cr><plug>(toc)", s:c, s:l, s:c)
  execute printf("omap <silent> a%s :<c-u>call <sid>between_the_chars(%s, 1, '%s', 0)<cr><plug>(toc)", s:c, s:l, s:c)
endfor

#+END_SRC
** DONE [#C] c-c c-n go to next heading c-c c-p go to  previous heading :ORG-MODE:NOTE:
CLOSED: [2016-10-09 Sun 00:51]
CLOCK: [2016-09-25 Sun 00:18]--[2016-09-25 Sun 00:19] =>  0:01
** DONE [#C] Change color scheme                                  :VIM:NOTE:
CLOSED: [2016-10-09 Sun 00:51]
CLOCK: [2016-09-25 Sun 19:34]--[2016-09-25 Sun 19:35] =>  0:01

#+BEGIN_SRC vimL
function! s:colors(...)
  return filter(map(filter(split(globpath(&rtp, 'colors/*.vim'), "\n"),
        \                  'v:val !~ "^/usr/"'),
        \           'fnamemodify(v:val, ":t:r")'),
        \       '!a:0 || stridx(v:val, a:1) >= 0')
endfunction
" ----------------------------------------------------------------------------
" <F8> | Color scheme selector
" ----------------------------------------------------------------------------
function! s:rotate_colors()
  if !exists('s:colors')
    let s:colors = s:colors()
  endif
  let name = remove(s:colors, 0)
  call add(s:colors, name)
  execute 'colorscheme' name
  redraw
  echo name
endfunction
nnoremap <silent> <F8> :call <SID>rotate_colors()<cr>
#+END_SRC
** DONE [#C] Rename vim  window name                              :VIM:NOTE:
CLOSED: [2016-10-09 Sun 00:51]
CLOCK: [2016-09-25 Sun 20:27]--[2016-09-25 Sun 20:30] =>  0:03
" Automatic rename of tmux window
  if exists('$TMUX') && !exists('$NORENAME')
    au BufEnter * if empty(&buftype) | call system('tmux rename-window '.expand('%:t:S')) | endif
    au VimLeave * call system('tmux set-window automatic-rename on')
endif
** DONE [#C] set clipboard=unnamed is for "* set clipboard=unnamedplus is for "+ :VIM:NOTE:
CLOSED: [2016-10-09 Sun 00:52]
CLOCK: [2016-09-25 Sun 20:42]--[2016-09-25 Sun 20:42] =>  0:00
** DONE [#C] vimrc take effect on the fly                         :VIM:NOTE:
CLOSED: [2016-10-09 Sun 00:52]
CLOCK: [2016-09-25 Sun 22:06]--[2016-09-25 Sun 22:08] =>  0:02
 au!
    au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
** DONE [#C] Help in new tab                                      :VIM:NOTE:
CLOSED: [2016-10-09 Sun 00:52]
CLOCK: [2016-09-25 Sun 22:12]--[2016-09-25 Sun 22:12] =>  0:00
#+BEGIN_SRC vimL
" ----------------------------------------------------------------------------
" Help in new tabs
" ----------------------------------------------------------------------------
function! s:helptab()
  if &buftype == 'help'
    wincmd T
    nnoremap <buffer> q :q<cr>
  endif
endfunction
autocmd vimrc BufEnter *.txt call s:helptab()

#+END_SRC
** DONE [#C] Using https://github.com/tpope/vim-repeat to repeat plugin command :VIM:NOTE:
CLOSED: [2016-10-09 Sun 00:52]
CLOCK: [2016-09-25 Sun 22:56]--[2016-09-25 Sun 22:58] =>  0:02
For example,pressing . to execute cs"' one more time is not working by default,in order to make it work,using this plugin

** DONE [#C] Using https://github.com/tpope/vim-endwise to automactically complete some statement like if,while :VIM:NOTE:
CLOSED: [2016-10-09 Sun 01:04]
CLOCK: [2016-09-25 Sun 23:10]--[2016-09-25 Sun 23:11] =>  0:01
** DONE [#C] q to quit help                                       :VIM:NOTE:
CLOSED: [2016-10-09 Sun 01:04]
CLOCK: [2016-09-25 Sun 23:24]--[2016-09-25 Sun 23:24] =>  0:00
** DONE [#C] having say this 说到这                        :VOCABULARY:NOTE:
CLOSED: [2016-10-09 Sun 01:04]
CLOCK: [2016-09-26 Mon 19:27]--[2016-09-26 Mon 19:27] =>  0:00
** DONE [#C] or 否则                                                  :NOTE:
CLOSED: [2016-10-09 Sun 01:04]
CLOCK: [2016-09-26 Mon 19:31]--[2016-09-26 Mon 19:32] =>  0:01
do not make the critical mistake of specifying only :<remote-branch-name> (with the colon), or the remote branch will be deleted!
** DONE [#C] https://github.com/oblique/create_ap               :NOTE:LINUX:
CLOSED: [2016-10-09 Sun 01:05]
CLOCK: [2016-09-27 Tue 03:00]--[2016-09-27 Tue 03:01] =>  0:01
** DONE [#C] bind key to reload config tmux                           :NOTE:
CLOSED: [2016-10-09 Sun 01:05]
CLOCK: [2016-09-27 Tue 20:55]--[2016-09-27 Tue 20:55] =>  0:00
# Reload ~/.tmux.conf
bind-key R source-file ~/.tmux.conf \; display-message "Reloaded!"
** DONE [#C] gci# to uncomment a paragraph                        :VIM:NOTE:
CLOSED: [2016-10-09 Sun 01:05]
CLOCK: [2016-09-28 Wed 08:10]--[2016-09-28 Wed 08:11] =>  0:01
** DONE [#C] ln -s must use full path                           :NOTE:LINUX:
CLOSED: [2016-10-09 Sun 01:06]
CLOCK: [2016-09-29 Thu 02:26]--[2016-09-29 Thu 02:26] =>  0:00
** DONE [#C] Add sudo to last command                           :NOTE:LINUX:
CLOSED: [2016-10-09 Sun 01:06]
CLOCK: [2016-09-29 Thu 06:51]--[2016-09-29 Thu 06:52] =>  0:01
#+BEGIN_SRC sh
  sudo-command-line() {
      [[ -z $BUFFER ]] && zle up-history
      [[ $BUFFER != sudo\ * ]] && {
        typeset -a bufs
        bufs=(${(z)BUFFER})
        if (( $+aliases[$bufs[1]] )); then
          bufs[1]=$aliases[$bufs[1]]
        fi
        bufs=(sudo $bufs)
        BUFFER=$bufs
      }
      zle end-of-line
  }
  zle -N sudo-command-line
  bindkey "^x^l" sudo-command-line
#+END_SRC
** DONE [#C] ]% to go unmatched bracket                           :VIM:NOTE:
CLOSED: [2016-10-09 Sun 01:06]
CLOCK: [2016-09-29 Thu 18:54]--[2016-09-29 Thu 18:55] =>  0:01
** DONE [#C] '' is different to ""                                :VIM:NOTE:
CLOSED: [2016-10-09 Sun 01:07]
CLOCK: [2016-09-29 Thu 19:21]--[2016-09-29 Thu 19:22] =>  0:01
** DONE [#C] Using hook                                               :NOTE:
CLOSED: [2016-10-09 Sun 01:07]
CLOCK: [2016-09-29 Thu 19:45]--[2016-09-29 Thu 19:49] =>  0:04
** DONE [#C] C-M-k to kill expression   emacs                         :NOTE:
CLOSED: [2016-10-09 Sun 01:07]
CLOCK: [2016-09-29 Thu 21:26]--[2016-09-29 Thu 21:27] =>  0:01
** DONE [#C] Dropbox link to target directory                         :NOTE:
CLOSED: [2016-10-09 Sun 01:08]
CLOCK: [2016-09-30 Fri 02:56]--[2016-09-30 Fri 02:56] =>  0:00
** DONE [#C] Firstly select code then insert code github.com          :NOTE:
CLOSED: [2016-10-09 Sun 01:08]
CLOCK: [2016-09-30 Fri 05:07]--[2016-09-30 Fri 05:07] =>  0:00
** DONE [#C] Disable Prefix Argument Keys keysnail                    :NOTE:
CLOSED: [2016-10-09 Sun 01:08]
CLOCK: [2016-09-30 Fri 06:37]--[2016-09-30 Fri 06:37] =>  0:00
** DONE Disable automatic comment insertion                       :VIM:NOTE:
CLOSED: [2016-10-09 Sun 01:08]
CLOCK: [2016-09-30 Fri 18:57]--[2016-09-30 Fri 18:58] =>  0:01
** DONE inputstream to byte java                                      :NOTE:
CLOSED: [2016-10-09 Sun 01:09]
CLOCK: [2016-10-01 Sat 18:07]--[2016-10-01 Sat 18:08] =>  0:01
#+BEGIN_SRC java
      public static final byte[] toBytes(InputStream inputStream) throws IOException {
          ByteArrayOutputStream baos = new ByteArrayOutputStream();
          byte[] bytes = new byte[4096];
          int len;
          while ((len = inputStream.read(bytes,0,4096))!=-1){
              baos.write(bytes,0,len);
          }
          return baos.toByteArray();
      }
#+END_SRC
** DONE l.a could match list.add method       idea       :INTELLIJIDEA:NOTE:
CLOSED: [2016-10-09 Sun 01:09]
CLOCK: [2016-10-01 Sat 18:15]--[2016-10-01 Sat 18:16] =>  0:01
** DONE StringBuilder append if single char using append(char c)   java :NOTE:
CLOSED: [2016-10-09 Sun 01:10]
CLOCK: [2016-10-01 Sat 20:03]--[2016-10-01 Sat 20:03] =>  0:00
** DONE Not capturing group regex java                                :NOTE:
CLOSED: [2016-10-09 Sun 01:10]
CLOCK: [2016-10-01 Sat 21:16]--[2016-10-01 Sat 21:18] =>  0:02
?:
http://stackoverflow.com/questions/3512471/what-is-a-non-capturing-group
** DONE gradle task only be executed once                             :NOTE:
CLOSED: [2016-10-09 Sun 01:10]
CLOCK: [2016-10-01 Sat 22:23]--[2016-10-01 Sat 22:23] =>  0:00
** DONE Continuing the build when a failure occurs in order to discover more error gradle :NOTE:
CLOSED: [2016-10-09 Sun 01:10]
CLOCK: [2016-10-01 Sat 22:30]--[2016-10-01 Sat 22:31] =>  0:01
** DONE dependency resolution transitive dependencies                 :NOTE:
CLOSED: [2016-10-09 Sun 01:11]
CLOCK: [2016-10-01 Sat 23:49]--[2016-10-01 Sat 23:49] =>  0:00
** DONE compile runtime testCompile testRuntime   gradle              :NOTE:
CLOSED: [2016-10-09 Sun 01:11]
CLOCK: [2016-10-01 Sat 23:59]--[2016-10-02 Sun 00:00] =>  0:01
** DONE quick switch tab,buffer using tab                         :VIM:NOTE:
CLOSED: [2016-10-09 Sun 01:12]
CLOCK: [2016-10-02 Sun 14:03]--[2016-10-02 Sun 14:04] =>  0:01
" go to the previous thing
func! s:alt_wintabbuf() abort
  let [b,w,t] = [g:lastbuf,g:lastwin,g:lasttab]
  if (b[1] - w[1]) > 0.2 && (b[1] - t[1]) > 0.2 && buflisted(b[0])
    return "\<C-^>"
  endif
  if w[1] >= b[1] && w[1] >= t[1] && w[0] <= winnr('$') && w[0] != winnr()
    return "\<C-w>p"
  endif
  if t[1] > b[1] && t[1] > w[1] && t[0] <= tabpagenr('$')
    return t[0].'gt'
  endif
  if winnr('$') > 1
    return "\<C-w>w"
  endif
  if buflisted(bufnr('#'))
    return "\<C-^>"
  endif
  if tabpagenr('$') > 1
    return "gt"
  endif
endf
augroup vimrc_last_wintabbuf
  autocmd!
  let [g:lastbuf,g:lastwin,g:lasttab] = [[1,0],[1,0],[1,0]]
  if exists('*reltimefloat')
    autocmd BufLeave * let g:lastbuf = [bufnr('%'), reltimefloat(reltime())]
    autocmd WinLeave * let g:lastwin = [winnr(),    reltimefloat(reltime())]
    autocmd TabLeave * let g:lasttab = [tabpagenr(),reltimefloat(reltime())]
  endif
augroup ENDnnoremap <silent><expr> <tab> (v:count > 0 ? '<C-w>w' : <SID>alt_wintabbuf())
** DONE <leader>enter enter buffer forth and back                 :VIM:NOTE:
CLOSED: [2016-10-09 Sun 01:12]
CLOCK: [2016-10-02 Sun 16:10]--[2016-10-02 Sun 16:10] =>  0:00
** DONE set completeopt-=preview to close top window              :VIM:NOTE:
CLOSED: [2016-10-09 Sun 01:12]
CLOCK: [2016-10-02 Sun 22:22]--[2016-10-02 Sun 22:22] =>  0:00
** DONE Never backup file                                         :VIM:NOTE:
CLOSED: [2016-10-09 Sun 01:12]
CLOCK: [2016-10-02 Sun 23:02]--[2016-10-02 Sun 23:03] =>  0:01
set nobackup
set noswapfile
set nowritebackup
** DONE nnoremap <Leader>Q :qa!<cr>                               :VIM:NOTE:
CLOSED: [2016-10-09 Sun 01:12]
CLOCK: [2016-10-02 Sun 23:05]--[2016-10-02 Sun 23:05] =>  0:00
** DONE cnoremap <C-g> <C-u><BS>                                  :VIM:NOTE:
CLOSED: [2016-10-09 Sun 01:12]
CLOCK: [2016-10-03 Mon 23:25]--[2016-10-03 Mon 23:25] =>  0:00
** DONE Adjust window size                                        :VIM:NOTE:
CLOSED: [2016-10-09 Sun 01:13]
CLOCK: [2016-10-03 Mon 23:27]--[2016-10-03 Mon 23:27] =>  0:00
nnoremap <silent><Down>  <C-w>-
nnoremap <silent><Up>    <C-w>+
nnoremap <silent><Left>  <C-w><
nnoremap <silent><Right> <C-w>>
** DONE yaourt proxy                                            :NOTE:LINUX:
CLOSED: [2016-10-09 Sun 01:13]
CLOCK: [2016-10-04 Tue 09:11]--[2016-10-04 Tue 09:11] =>  0:00
https://horizonsplit.wordpress.com/2012/02/03/240/
** DONE [<space> to add  above line ]<space> to add below line vim-unimpaired :VIM:NOTE:
CLOSED: [2016-10-09 Sun 01:13]
CLOCK: [2016-10-04 Tue 19:35]--[2016-10-04 Tue 19:37] =>  0:02
** DONE argument object                                           :VIM:NOTE:
CLOSED: [2016-10-09 Sun 01:13]
CLOCK: [2016-10-04 Tue 20:59]--[2016-10-04 Tue 21:00] =>  0:01
https://github.com/wellle/targets.vim
** DONE https://github.com/tommcdo/vim-exchange  easy exchange    :VIM:NOTE:
CLOSED: [2016-10-09 Sun 01:13]
CLOCK: [2016-10-05 Wed 07:00]--[2016-10-05 Wed 07:01] =>  0:01

** DONE Using == align line                                       :VIM:NOTE:
CLOSED: [2016-10-09 Sun 01:13]
CLOCK: [2016-10-05 Wed 07:06]--[2016-10-05 Wed 07:06] =>  0:00
** DONE vim-zeal for offline document                             :VIM:NOTE:
CLOSED: [2016-10-09 Sun 01:13]
CLOCK: [2016-10-05 Wed 08:20]--[2016-10-05 Wed 08:20] =>  0:00
** DONE const tricks golang                                           :NOTE:
CLOSED: [2016-10-09 Sun 01:13]
CLOCK: [2016-10-06 Thu 08:18]--[2016-10-06 Thu 08:18] =>  0:00
type ExportStrategy int

const (
	ExportTranslation = 1 << iota
	ExportExplains
	ExportQueryCount
)
** DONE Improving test in neovim                                  :VIM:NOTE:
CLOSED: [2016-10-09 Sun 01:14]
CLOCK: [2016-10-07 Fri 08:16]--[2016-10-07 Fri 08:17] =>  0:01
if has("nvim")
    let g:go_term_enabled = 1
endif
** DONE junegunn/vim-after-object                                 :VIM:NOTE:
CLOSED: [2016-10-09 Sun 01:14]
CLOCK: [2016-10-07 Fri 21:01]--[2016-10-07 Fri 21:01] =>  0:00
** DONE c2in( to change in the second block                       :VIM:NOTE:
CLOSED: [2016-10-09 Sun 01:14]
CLOCK: [2016-10-07 Fri 21:17]--[2016-10-07 Fri 21:18] =>  0:01
** DONE wellle/targets.vim add some awesome target object and tricks. cin() for changing in the next (, ci( will seek correspondening block in current line :VIM:NOTE:
CLOSED: [2016-10-09 Sun 01:14]
CLOCK: [2016-10-07 Fri 21:18]--[2016-10-07 Fri 21:19] =>  0:01
** DONE Using [[ to jump to function line                         :VIM:NOTE:
CLOSED: [2016-10-09 Sun 01:14]
CLOCK: [2016-10-08 Sat 00:42]--[2016-10-08 Sat 00:42] =>  0:00

** DONE Using indent motion [+ [- [= ]+ ]- ]=                     :VIM:NOTE:
CLOSED: [2016-10-09 Sun 01:14]
CLOCK: [2016-10-08 Sat 00:47]--[2016-10-08 Sat 00:48] =>  0:01
** press tab will locate cursor to correspondening item  in org-todo-list :NOTE:
CLOCK: [2016-10-09 Sun 01:54]--[2016-10-09 Sun 01:56] =>  0:02
